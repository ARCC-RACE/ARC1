
ARC1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000156c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000004  20000000  0000156c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000027c  20000004  00001570  00020004  2**2
                  ALLOC
  3 .stack        00002000  20000280  000017ec  00020004  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
  6 .debug_info   000268f9  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002f89  00000000  00000000  0004697e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005477  00000000  00000000  00049907  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000560  00000000  00000000  0004ed7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000620  00000000  00000000  0004f2de  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00005189  00000000  00000000  0004f8fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000a3cc  00000000  00000000  00054a87  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008d5a4  00000000  00000000  0005ee53  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000d5c  00000000  00000000  000ec3f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	80 22 00 20 e1 12 00 00 dd 12 00 00 dd 12 00 00     .". ............
	...
      2c:	dd 12 00 00 00 00 00 00 00 00 00 00 dd 12 00 00     ................
      3c:	dd 12 00 00 dd 12 00 00 dd 12 00 00 dd 12 00 00     ................
      4c:	dd 12 00 00 c9 0d 00 00 dd 12 00 00 dd 12 00 00     ................
      5c:	01 08 00 00 dd 12 00 00 99 01 00 00 a9 01 00 00     ................
      6c:	b9 01 00 00 c9 01 00 00 d9 01 00 00 e9 01 00 00     ................
      7c:	d1 07 00 00 e1 07 00 00 f1 07 00 00 dd 12 00 00     ................
      8c:	dd 12 00 00 dd 12 00 00 00 00 00 00 00 00 00 00     ................
      9c:	dd 12 00 00 dd 12 00 00 dd 12 00 00 dd 12 00 00     ................
      ac:	dd 12 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000004 	.word	0x20000004
      d4:	00000000 	.word	0x00000000
      d8:	0000156c 	.word	0x0000156c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000008 	.word	0x20000008
     108:	0000156c 	.word	0x0000156c
     10c:	0000156c 	.word	0x0000156c
     110:	00000000 	.word	0x00000000

00000114 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     114:	4a04      	ldr	r2, [pc, #16]	; (128 <_extint_enable+0x14>)
     116:	7813      	ldrb	r3, [r2, #0]
     118:	2102      	movs	r1, #2
     11a:	430b      	orrs	r3, r1
     11c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     11e:	7853      	ldrb	r3, [r2, #1]
     120:	b25b      	sxtb	r3, r3
     122:	2b00      	cmp	r3, #0
     124:	dbfb      	blt.n	11e <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     126:	4770      	bx	lr
     128:	40001800 	.word	0x40001800

0000012c <_system_extint_init>:
{
     12c:	b500      	push	{lr}
     12e:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     130:	4a12      	ldr	r2, [pc, #72]	; (17c <_system_extint_init+0x50>)
     132:	6993      	ldr	r3, [r2, #24]
     134:	2140      	movs	r1, #64	; 0x40
     136:	430b      	orrs	r3, r1
     138:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     13a:	a901      	add	r1, sp, #4
     13c:	2300      	movs	r3, #0
     13e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     140:	2005      	movs	r0, #5
     142:	4b0f      	ldr	r3, [pc, #60]	; (180 <_system_extint_init+0x54>)
     144:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     146:	2005      	movs	r0, #5
     148:	4b0e      	ldr	r3, [pc, #56]	; (184 <_system_extint_init+0x58>)
     14a:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     14c:	4a0e      	ldr	r2, [pc, #56]	; (188 <_system_extint_init+0x5c>)
     14e:	7813      	ldrb	r3, [r2, #0]
     150:	2101      	movs	r1, #1
     152:	430b      	orrs	r3, r1
     154:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     156:	7853      	ldrb	r3, [r2, #1]
     158:	b25b      	sxtb	r3, r3
     15a:	2b00      	cmp	r3, #0
     15c:	dbfb      	blt.n	156 <_system_extint_init+0x2a>
     15e:	4b0b      	ldr	r3, [pc, #44]	; (18c <_system_extint_init+0x60>)
     160:	0019      	movs	r1, r3
     162:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     164:	2200      	movs	r2, #0
     166:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     168:	4299      	cmp	r1, r3
     16a:	d1fc      	bne.n	166 <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     16c:	2210      	movs	r2, #16
     16e:	4b08      	ldr	r3, [pc, #32]	; (190 <_system_extint_init+0x64>)
     170:	601a      	str	r2, [r3, #0]
	_extint_enable();
     172:	4b08      	ldr	r3, [pc, #32]	; (194 <_system_extint_init+0x68>)
     174:	4798      	blx	r3
}
     176:	b003      	add	sp, #12
     178:	bd00      	pop	{pc}
     17a:	46c0      	nop			; (mov r8, r8)
     17c:	40000400 	.word	0x40000400
     180:	000011b9 	.word	0x000011b9
     184:	0000112d 	.word	0x0000112d
     188:	40001800 	.word	0x40001800
     18c:	20000074 	.word	0x20000074
     190:	e000e100 	.word	0xe000e100
     194:	00000115 	.word	0x00000115

00000198 <SERCOM0_Handler>:
	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
}

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     198:	b510      	push	{r4, lr}
     19a:	4b02      	ldr	r3, [pc, #8]	; (1a4 <SERCOM0_Handler+0xc>)
     19c:	681b      	ldr	r3, [r3, #0]
     19e:	2000      	movs	r0, #0
     1a0:	4798      	blx	r3
     1a2:	bd10      	pop	{r4, pc}
     1a4:	20000020 	.word	0x20000020

000001a8 <SERCOM1_Handler>:
     1a8:	b510      	push	{r4, lr}
     1aa:	4b02      	ldr	r3, [pc, #8]	; (1b4 <SERCOM1_Handler+0xc>)
     1ac:	685b      	ldr	r3, [r3, #4]
     1ae:	2001      	movs	r0, #1
     1b0:	4798      	blx	r3
     1b2:	bd10      	pop	{r4, pc}
     1b4:	20000020 	.word	0x20000020

000001b8 <SERCOM2_Handler>:
     1b8:	b510      	push	{r4, lr}
     1ba:	4b02      	ldr	r3, [pc, #8]	; (1c4 <SERCOM2_Handler+0xc>)
     1bc:	689b      	ldr	r3, [r3, #8]
     1be:	2002      	movs	r0, #2
     1c0:	4798      	blx	r3
     1c2:	bd10      	pop	{r4, pc}
     1c4:	20000020 	.word	0x20000020

000001c8 <SERCOM3_Handler>:
     1c8:	b510      	push	{r4, lr}
     1ca:	4b02      	ldr	r3, [pc, #8]	; (1d4 <SERCOM3_Handler+0xc>)
     1cc:	68db      	ldr	r3, [r3, #12]
     1ce:	2003      	movs	r0, #3
     1d0:	4798      	blx	r3
     1d2:	bd10      	pop	{r4, pc}
     1d4:	20000020 	.word	0x20000020

000001d8 <SERCOM4_Handler>:
     1d8:	b510      	push	{r4, lr}
     1da:	4b02      	ldr	r3, [pc, #8]	; (1e4 <SERCOM4_Handler+0xc>)
     1dc:	691b      	ldr	r3, [r3, #16]
     1de:	2004      	movs	r0, #4
     1e0:	4798      	blx	r3
     1e2:	bd10      	pop	{r4, pc}
     1e4:	20000020 	.word	0x20000020

000001e8 <SERCOM5_Handler>:
     1e8:	b510      	push	{r4, lr}
     1ea:	4b02      	ldr	r3, [pc, #8]	; (1f4 <SERCOM5_Handler+0xc>)
     1ec:	695b      	ldr	r3, [r3, #20]
     1ee:	2005      	movs	r0, #5
     1f0:	4798      	blx	r3
     1f2:	bd10      	pop	{r4, pc}
     1f4:	20000020 	.word	0x20000020

000001f8 <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
     1f8:	4b09      	ldr	r3, [pc, #36]	; (220 <_tcc_get_inst_index+0x28>)
     1fa:	4298      	cmp	r0, r3
     1fc:	d00c      	beq.n	218 <_tcc_get_inst_index+0x20>
     1fe:	4b09      	ldr	r3, [pc, #36]	; (224 <_tcc_get_inst_index+0x2c>)
     200:	4298      	cmp	r0, r3
     202:	d007      	beq.n	214 <_tcc_get_inst_index+0x1c>
     204:	4a08      	ldr	r2, [pc, #32]	; (228 <_tcc_get_inst_index+0x30>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     206:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
     208:	4290      	cmp	r0, r2
     20a:	d001      	beq.n	210 <_tcc_get_inst_index+0x18>
}
     20c:	0018      	movs	r0, r3
     20e:	4770      	bx	lr
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
     210:	3302      	adds	r3, #2
     212:	e002      	b.n	21a <_tcc_get_inst_index+0x22>
     214:	2301      	movs	r3, #1
     216:	e000      	b.n	21a <_tcc_get_inst_index+0x22>
     218:	2300      	movs	r3, #0
			return i;
     21a:	b2db      	uxtb	r3, r3
     21c:	e7f6      	b.n	20c <_tcc_get_inst_index+0x14>
     21e:	46c0      	nop			; (mov r8, r8)
     220:	42002000 	.word	0x42002000
     224:	42002400 	.word	0x42002400
     228:	42002800 	.word	0x42002800

0000022c <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
     22c:	b510      	push	{r4, lr}
     22e:	0004      	movs	r4, r0
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
     230:	0008      	movs	r0, r1
     232:	4b4f      	ldr	r3, [pc, #316]	; (370 <tcc_get_config_defaults+0x144>)
     234:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
     236:	2300      	movs	r3, #0
     238:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
     23a:	0080      	lsls	r0, r0, #2
     23c:	4a4d      	ldr	r2, [pc, #308]	; (374 <tcc_get_config_defaults+0x148>)
     23e:	5882      	ldr	r2, [r0, r2]
     240:	6062      	str	r2, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
     242:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
     244:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
     246:	7323      	strb	r3, [r4, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
     248:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
     24a:	7223      	strb	r3, [r4, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
     24c:	61e3      	str	r3, [r4, #28]
     24e:	6223      	str	r3, [r4, #32]
     250:	6263      	str	r3, [r4, #36]	; 0x24
     252:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
     254:	7523      	strb	r3, [r4, #20]
     256:	7563      	strb	r3, [r4, #21]
     258:	75a3      	strb	r3, [r4, #22]
     25a:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
     25c:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
     25e:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
     260:	7423      	strb	r3, [r4, #16]
     262:	7463      	strb	r3, [r4, #17]
     264:	74a3      	strb	r3, [r4, #18]
     266:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
     268:	222c      	movs	r2, #44	; 0x2c
     26a:	54a3      	strb	r3, [r4, r2]
     26c:	3201      	adds	r2, #1
     26e:	54a3      	strb	r3, [r4, r2]
     270:	3201      	adds	r2, #1
     272:	54a3      	strb	r3, [r4, r2]
     274:	3201      	adds	r2, #1
     276:	54a3      	strb	r3, [r4, r2]
     278:	3201      	adds	r2, #1
     27a:	54a3      	strb	r3, [r4, r2]
     27c:	3201      	adds	r2, #1
     27e:	54a3      	strb	r3, [r4, r2]
     280:	3201      	adds	r2, #1
     282:	54a3      	strb	r3, [r4, r2]
     284:	3201      	adds	r2, #1
     286:	54a3      	strb	r3, [r4, r2]
     288:	3201      	adds	r2, #1
     28a:	54a3      	strb	r3, [r4, r2]
     28c:	3201      	adds	r2, #1
     28e:	54a3      	strb	r3, [r4, r2]
     290:	3201      	adds	r2, #1
     292:	54a3      	strb	r3, [r4, r2]
     294:	3201      	adds	r2, #1
     296:	54a3      	strb	r3, [r4, r2]
     298:	3201      	adds	r2, #1
     29a:	54a3      	strb	r3, [r4, r2]
     29c:	3201      	adds	r2, #1
     29e:	54a3      	strb	r3, [r4, r2]
     2a0:	3201      	adds	r2, #1
     2a2:	54a3      	strb	r3, [r4, r2]
     2a4:	3201      	adds	r2, #1
     2a6:	54a3      	strb	r3, [r4, r2]
     2a8:	3201      	adds	r2, #1
     2aa:	54a3      	strb	r3, [r4, r2]
     2ac:	3201      	adds	r2, #1
     2ae:	54a3      	strb	r3, [r4, r2]
     2b0:	3201      	adds	r2, #1
     2b2:	54a3      	strb	r3, [r4, r2]
     2b4:	3201      	adds	r2, #1
     2b6:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
     2b8:	3201      	adds	r2, #1
     2ba:	54a3      	strb	r3, [r4, r2]
     2bc:	3201      	adds	r2, #1
     2be:	54a3      	strb	r3, [r4, r2]
     2c0:	3201      	adds	r2, #1
     2c2:	54a3      	strb	r3, [r4, r2]
     2c4:	3201      	adds	r2, #1
     2c6:	54a3      	strb	r3, [r4, r2]
     2c8:	3201      	adds	r2, #1
     2ca:	54a3      	strb	r3, [r4, r2]
     2cc:	3201      	adds	r2, #1
     2ce:	54a3      	strb	r3, [r4, r2]
     2d0:	3201      	adds	r2, #1
     2d2:	54a3      	strb	r3, [r4, r2]
     2d4:	3201      	adds	r2, #1
     2d6:	54a3      	strb	r3, [r4, r2]
     2d8:	3201      	adds	r2, #1
     2da:	54a3      	strb	r3, [r4, r2]
     2dc:	3201      	adds	r2, #1
     2de:	54a3      	strb	r3, [r4, r2]
     2e0:	3201      	adds	r2, #1
     2e2:	54a3      	strb	r3, [r4, r2]
     2e4:	3201      	adds	r2, #1
     2e6:	54a3      	strb	r3, [r4, r2]
     2e8:	3201      	adds	r2, #1
     2ea:	54a3      	strb	r3, [r4, r2]
     2ec:	3201      	adds	r2, #1
     2ee:	54a3      	strb	r3, [r4, r2]
     2f0:	3201      	adds	r2, #1
     2f2:	54a3      	strb	r3, [r4, r2]
     2f4:	3201      	adds	r2, #1
     2f6:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
     2f8:	3201      	adds	r2, #1
     2fa:	54a3      	strb	r3, [r4, r2]
     2fc:	3201      	adds	r2, #1
     2fe:	54a3      	strb	r3, [r4, r2]
     300:	3201      	adds	r2, #1
     302:	54a3      	strb	r3, [r4, r2]
     304:	3201      	adds	r2, #1
     306:	54a3      	strb	r3, [r4, r2]
     308:	3201      	adds	r2, #1
     30a:	54a3      	strb	r3, [r4, r2]
     30c:	3201      	adds	r2, #1
     30e:	54a3      	strb	r3, [r4, r2]
     310:	3201      	adds	r2, #1
     312:	54a3      	strb	r3, [r4, r2]
     314:	3201      	adds	r2, #1
     316:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
     318:	3241      	adds	r2, #65	; 0x41
     31a:	54a3      	strb	r3, [r4, r2]
     31c:	65a3      	str	r3, [r4, #88]	; 0x58
     31e:	67a3      	str	r3, [r4, #120]	; 0x78
     320:	3201      	adds	r2, #1
     322:	54a3      	strb	r3, [r4, r2]
     324:	65e3      	str	r3, [r4, #92]	; 0x5c
     326:	67e3      	str	r3, [r4, #124]	; 0x7c
     328:	3201      	adds	r2, #1
     32a:	54a3      	strb	r3, [r4, r2]
     32c:	6623      	str	r3, [r4, #96]	; 0x60
     32e:	3a1a      	subs	r2, #26
     330:	50a3      	str	r3, [r4, r2]
     332:	321b      	adds	r2, #27
     334:	54a3      	strb	r3, [r4, r2]
     336:	6663      	str	r3, [r4, #100]	; 0x64
     338:	3a17      	subs	r2, #23
     33a:	50a3      	str	r3, [r4, r2]
     33c:	3218      	adds	r2, #24
     33e:	54a3      	strb	r3, [r4, r2]
     340:	66a3      	str	r3, [r4, #104]	; 0x68
     342:	3a14      	subs	r2, #20
     344:	50a3      	str	r3, [r4, r2]
     346:	3215      	adds	r2, #21
     348:	54a3      	strb	r3, [r4, r2]
     34a:	66e3      	str	r3, [r4, #108]	; 0x6c
     34c:	3a11      	subs	r2, #17
     34e:	50a3      	str	r3, [r4, r2]
     350:	3212      	adds	r2, #18
     352:	54a3      	strb	r3, [r4, r2]
     354:	6723      	str	r3, [r4, #112]	; 0x70
     356:	3a0e      	subs	r2, #14
     358:	50a3      	str	r3, [r4, r2]
     35a:	320f      	adds	r2, #15
     35c:	54a3      	strb	r3, [r4, r2]
     35e:	6763      	str	r3, [r4, #116]	; 0x74
     360:	3a0b      	subs	r2, #11
     362:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
     364:	2101      	movs	r1, #1
     366:	320c      	adds	r2, #12
     368:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
     36a:	3201      	adds	r2, #1
     36c:	54a3      	strb	r3, [r4, r2]
}
     36e:	bd10      	pop	{r4, pc}
     370:	000001f9 	.word	0x000001f9
     374:	000014d8 	.word	0x000014d8

00000378 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
     378:	b5f0      	push	{r4, r5, r6, r7, lr}
     37a:	46de      	mov	lr, fp
     37c:	4657      	mov	r7, sl
     37e:	464e      	mov	r6, r9
     380:	4645      	mov	r5, r8
     382:	b5e0      	push	{r5, r6, r7, lr}
     384:	b091      	sub	sp, #68	; 0x44
     386:	9001      	str	r0, [sp, #4]
     388:	000c      	movs	r4, r1
     38a:	0015      	movs	r5, r2
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
     38c:	0008      	movs	r0, r1
     38e:	4bc3      	ldr	r3, [pc, #780]	; (69c <tcc_init+0x324>)
     390:	4798      	blx	r3
     392:	0003      	movs	r3, r0

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     394:	0001      	movs	r1, r0
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     396:	48c2      	ldr	r0, [pc, #776]	; (6a0 <tcc_init+0x328>)
     398:	6a02      	ldr	r2, [r0, #32]
     39a:	009e      	lsls	r6, r3, #2
     39c:	4fc1      	ldr	r7, [pc, #772]	; (6a4 <tcc_init+0x32c>)
     39e:	59f7      	ldr	r7, [r6, r7]
     3a0:	433a      	orrs	r2, r7
     3a2:	6202      	str	r2, [r0, #32]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
     3a4:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
     3a6:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
     3a8:	0792      	lsls	r2, r2, #30
     3aa:	d506      	bpl.n	3ba <tcc_init+0x42>
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
     3ac:	b011      	add	sp, #68	; 0x44
     3ae:	bc3c      	pop	{r2, r3, r4, r5}
     3b0:	4690      	mov	r8, r2
     3b2:	4699      	mov	r9, r3
     3b4:	46a2      	mov	sl, r4
     3b6:	46ab      	mov	fp, r5
     3b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
     3ba:	6822      	ldr	r2, [r4, #0]
     3bc:	2701      	movs	r7, #1
     3be:	4017      	ands	r7, r2
     3c0:	d1f4      	bne.n	3ac <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
     3c2:	48b9      	ldr	r0, [pc, #740]	; (6a8 <tcc_init+0x330>)
     3c4:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
     3c6:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
     3c8:	682e      	ldr	r6, [r5, #0]
     3ca:	42b2      	cmp	r2, r6
     3cc:	d3ee      	bcc.n	3ac <tcc_init+0x34>
		|| (config->counter.period > count_max)
     3ce:	686e      	ldr	r6, [r5, #4]
     3d0:	42b2      	cmp	r2, r6
     3d2:	d3eb      	bcc.n	3ac <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
     3d4:	69e8      	ldr	r0, [r5, #28]
     3d6:	4282      	cmp	r2, r0
     3d8:	d200      	bcs.n	3dc <tcc_init+0x64>
     3da:	e1b9      	b.n	750 <tcc_init+0x3d8>
     3dc:	6a28      	ldr	r0, [r5, #32]
     3de:	4282      	cmp	r2, r0
     3e0:	d200      	bcs.n	3e4 <tcc_init+0x6c>
     3e2:	e1b7      	b.n	754 <tcc_init+0x3dc>
     3e4:	6a68      	ldr	r0, [r5, #36]	; 0x24
     3e6:	4282      	cmp	r2, r0
     3e8:	d200      	bcs.n	3ec <tcc_init+0x74>
     3ea:	e1b5      	b.n	758 <tcc_init+0x3e0>
     3ec:	6aa8      	ldr	r0, [r5, #40]	; 0x28
     3ee:	4282      	cmp	r2, r0
     3f0:	d200      	bcs.n	3f4 <tcc_init+0x7c>
     3f2:	e1b3      	b.n	75c <tcc_init+0x3e4>
     3f4:	2298      	movs	r2, #152	; 0x98
     3f6:	4694      	mov	ip, r2
     3f8:	44ac      	add	ip, r5
     3fa:	4662      	mov	r2, ip
     3fc:	9208      	str	r2, [sp, #32]
     3fe:	2000      	movs	r0, #0
     400:	e003      	b.n	40a <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     402:	3001      	adds	r0, #1
     404:	3201      	adds	r2, #1
     406:	2808      	cmp	r0, #8
     408:	d008      	beq.n	41c <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
     40a:	7816      	ldrb	r6, [r2, #0]
     40c:	2e00      	cmp	r6, #0
     40e:	d0f8      	beq.n	402 <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
     410:	4ea6      	ldr	r6, [pc, #664]	; (6ac <tcc_init+0x334>)
     412:	5c76      	ldrb	r6, [r6, r1]
     414:	4286      	cmp	r6, r0
     416:	dcf4      	bgt.n	402 <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
     418:	2017      	movs	r0, #23
     41a:	e7c7      	b.n	3ac <tcc_init+0x34>
     41c:	2200      	movs	r2, #0
     41e:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
     420:	2080      	movs	r0, #128	; 0x80
     422:	0440      	lsls	r0, r0, #17
     424:	4684      	mov	ip, r0
     426:	e002      	b.n	42e <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
     428:	3201      	adds	r2, #1
     42a:	2a04      	cmp	r2, #4
     42c:	d00e      	beq.n	44c <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
     42e:	18a8      	adds	r0, r5, r2
     430:	7c00      	ldrb	r0, [r0, #16]
     432:	2801      	cmp	r0, #1
     434:	d1f8      	bne.n	428 <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
     436:	489e      	ldr	r0, [pc, #632]	; (6b0 <tcc_init+0x338>)
     438:	5c40      	ldrb	r0, [r0, r1]
     43a:	4290      	cmp	r0, r2
     43c:	da00      	bge.n	440 <tcc_init+0xc8>
     43e:	e18f      	b.n	760 <tcc_init+0x3e8>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
     440:	4660      	mov	r0, ip
     442:	4090      	lsls	r0, r2
     444:	9e02      	ldr	r6, [sp, #8]
     446:	4306      	orrs	r6, r0
     448:	9602      	str	r6, [sp, #8]
     44a:	e7ed      	b.n	428 <tcc_init+0xb0>
	if (config->run_in_standby) {
     44c:	329d      	adds	r2, #157	; 0x9d
     44e:	5caa      	ldrb	r2, [r5, r2]
     450:	2a00      	cmp	r2, #0
     452:	d004      	beq.n	45e <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
     454:	2280      	movs	r2, #128	; 0x80
     456:	0112      	lsls	r2, r2, #4
     458:	9902      	ldr	r1, [sp, #8]
     45a:	4311      	orrs	r1, r2
     45c:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
     45e:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
     460:	1e51      	subs	r1, r2, #1
     462:	418a      	sbcs	r2, r1
     464:	0092      	lsls	r2, r2, #2
     466:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
     468:	7a6a      	ldrb	r2, [r5, #9]
     46a:	2a01      	cmp	r2, #1
     46c:	d022      	beq.n	4b4 <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
     46e:	4a90      	ldr	r2, [pc, #576]	; (6b0 <tcc_init+0x338>)
     470:	5cd2      	ldrb	r2, [r2, r3]
     472:	0011      	movs	r1, r2
     474:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
     476:	2235      	movs	r2, #53	; 0x35
     478:	5caa      	ldrb	r2, [r5, r2]
     47a:	428a      	cmp	r2, r1
     47c:	d300      	bcc.n	480 <tcc_init+0x108>
     47e:	e179      	b.n	774 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
     480:	212c      	movs	r1, #44	; 0x2c
     482:	5c69      	ldrb	r1, [r5, r1]
     484:	290f      	cmp	r1, #15
     486:	d900      	bls.n	48a <tcc_init+0x112>
     488:	e174      	b.n	774 <tcc_init+0x3fc>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
     48a:	7b28      	ldrb	r0, [r5, #12]
     48c:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
     48e:	7ae8      	ldrb	r0, [r5, #11]
     490:	900b      	str	r0, [sp, #44]	; 0x2c
     492:	202d      	movs	r0, #45	; 0x2d
     494:	4682      	mov	sl, r0
     496:	44aa      	add	sl, r5
     498:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
     49a:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
     49c:	ae0e      	add	r6, sp, #56	; 0x38
     49e:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
     4a0:	26c0      	movs	r6, #192	; 0xc0
     4a2:	0136      	lsls	r6, r6, #4
     4a4:	46b1      	mov	r9, r6
     4a6:	4684      	mov	ip, r0
     4a8:	46a0      	mov	r8, r4
     4aa:	0028      	movs	r0, r5
     4ac:	4655      	mov	r5, sl
     4ae:	9309      	str	r3, [sp, #36]	; 0x24
     4b0:	4682      	mov	sl, r0
     4b2:	e035      	b.n	520 <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
     4b4:	9906      	ldr	r1, [sp, #24]
     4b6:	4311      	orrs	r1, r2
     4b8:	9106      	str	r1, [sp, #24]
     4ba:	e7d8      	b.n	46e <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
     4bc:	0292      	lsls	r2, r2, #10
     4be:	464f      	mov	r7, r9
     4c0:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     4c2:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
     4c4:	7919      	ldrb	r1, [r3, #4]
     4c6:	468b      	mov	fp, r1
     4c8:	2103      	movs	r1, #3
     4ca:	465f      	mov	r7, fp
     4cc:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     4ce:	430a      	orrs	r2, r1
     4d0:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
     4d2:	795a      	ldrb	r2, [r3, #5]
     4d4:	0152      	lsls	r2, r2, #5
     4d6:	2160      	movs	r1, #96	; 0x60
     4d8:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     4da:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
     4dc:	7999      	ldrb	r1, [r3, #6]
     4de:	0209      	lsls	r1, r1, #8
     4e0:	26c0      	movs	r6, #192	; 0xc0
     4e2:	00b6      	lsls	r6, r6, #2
     4e4:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     4e6:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
     4e8:	79da      	ldrb	r2, [r3, #7]
     4ea:	0312      	lsls	r2, r2, #12
     4ec:	21e0      	movs	r1, #224	; 0xe0
     4ee:	01c9      	lsls	r1, r1, #7
     4f0:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     4f2:	4316      	orrs	r6, r2
     4f4:	4334      	orrs	r4, r6
     4f6:	9a03      	ldr	r2, [sp, #12]
     4f8:	4314      	orrs	r4, r2
     4fa:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
     4fc:	4662      	mov	r2, ip
     4fe:	9907      	ldr	r1, [sp, #28]
     500:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
     502:	2a04      	cmp	r2, #4
     504:	d02a      	beq.n	55c <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
     506:	7c9a      	ldrb	r2, [r3, #18]
     508:	9905      	ldr	r1, [sp, #20]
     50a:	4291      	cmp	r1, r2
     50c:	d800      	bhi.n	510 <tcc_init+0x198>
     50e:	e131      	b.n	774 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
     510:	7a59      	ldrb	r1, [r3, #9]
     512:	350a      	adds	r5, #10
     514:	2304      	movs	r3, #4
     516:	469b      	mov	fp, r3
     518:	44dc      	add	ip, fp
     51a:	290f      	cmp	r1, #15
     51c:	d900      	bls.n	520 <tcc_init+0x1a8>
     51e:	e129      	b.n	774 <tcc_init+0x3fc>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     520:	0609      	lsls	r1, r1, #24
     522:	23f0      	movs	r3, #240	; 0xf0
     524:	051b      	lsls	r3, r3, #20
     526:	4019      	ands	r1, r3
     528:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
     52a:	782e      	ldrb	r6, [r5, #0]
     52c:	0436      	lsls	r6, r6, #16
     52e:	20ff      	movs	r0, #255	; 0xff
     530:	0400      	lsls	r0, r0, #16
     532:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
     534:	7868      	ldrb	r0, [r5, #1]
     536:	2480      	movs	r4, #128	; 0x80
     538:	2800      	cmp	r0, #0
     53a:	d100      	bne.n	53e <tcc_init+0x1c6>
     53c:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
     53e:	7898      	ldrb	r0, [r3, #2]
     540:	2708      	movs	r7, #8
     542:	9703      	str	r7, [sp, #12]
     544:	2800      	cmp	r0, #0
     546:	d101      	bne.n	54c <tcc_init+0x1d4>
     548:	9804      	ldr	r0, [sp, #16]
     54a:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
     54c:	78d8      	ldrb	r0, [r3, #3]
     54e:	4683      	mov	fp, r0
     550:	2010      	movs	r0, #16
     552:	465f      	mov	r7, fp
     554:	2f00      	cmp	r7, #0
     556:	d1b1      	bne.n	4bc <tcc_init+0x144>
     558:	9804      	ldr	r0, [sp, #16]
     55a:	e7af      	b.n	4bc <tcc_init+0x144>
     55c:	4644      	mov	r4, r8
     55e:	4655      	mov	r5, sl
     560:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
     562:	4a52      	ldr	r2, [pc, #328]	; (6ac <tcc_init+0x334>)
     564:	5cd2      	ldrb	r2, [r2, r3]
     566:	4691      	mov	r9, r2
     568:	4651      	mov	r1, sl
     56a:	3150      	adds	r1, #80	; 0x50
     56c:	4650      	mov	r0, sl
     56e:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
     570:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     572:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
     574:	2601      	movs	r6, #1
     576:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
     578:	2602      	movs	r6, #2
     57a:	36ff      	adds	r6, #255	; 0xff
     57c:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
     57e:	2680      	movs	r6, #128	; 0x80
     580:	0276      	lsls	r6, r6, #9
     582:	46b0      	mov	r8, r6
     584:	46a4      	mov	ip, r4
     586:	001c      	movs	r4, r3
     588:	464b      	mov	r3, r9
     58a:	e00f      	b.n	5ac <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
     58c:	7806      	ldrb	r6, [r0, #0]
     58e:	2e00      	cmp	r6, #0
     590:	d007      	beq.n	5a2 <tcc_init+0x22a>
			if (i >= ow_num) {
     592:	4293      	cmp	r3, r2
     594:	d800      	bhi.n	598 <tcc_init+0x220>
     596:	e0e7      	b.n	768 <tcc_init+0x3f0>
			if (config->wave_ext.non_recoverable_fault[i].output ==
     598:	2e02      	cmp	r6, #2
     59a:	d014      	beq.n	5c6 <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
     59c:	4656      	mov	r6, sl
     59e:	4096      	lsls	r6, r2
     5a0:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     5a2:	3201      	adds	r2, #1
     5a4:	3101      	adds	r1, #1
     5a6:	3002      	adds	r0, #2
     5a8:	2a08      	cmp	r2, #8
     5aa:	d010      	beq.n	5ce <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
     5ac:	780e      	ldrb	r6, [r1, #0]
     5ae:	2e00      	cmp	r6, #0
     5b0:	d0ec      	beq.n	58c <tcc_init+0x214>
			if (i >= ow_num) {
     5b2:	4293      	cmp	r3, r2
     5b4:	d800      	bhi.n	5b8 <tcc_init+0x240>
     5b6:	e0d5      	b.n	764 <tcc_init+0x3ec>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
     5b8:	4646      	mov	r6, r8
     5ba:	4096      	lsls	r6, r2
     5bc:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
     5be:	7806      	ldrb	r6, [r0, #0]
     5c0:	2e00      	cmp	r6, #0
     5c2:	d1e9      	bne.n	598 <tcc_init+0x220>
     5c4:	e7ed      	b.n	5a2 <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
     5c6:	465e      	mov	r6, fp
     5c8:	4096      	lsls	r6, r2
     5ca:	4337      	orrs	r7, r6
     5cc:	e7e9      	b.n	5a2 <tcc_init+0x22a>
     5ce:	4699      	mov	r9, r3
     5d0:	0023      	movs	r3, r4
     5d2:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
     5d4:	7e6a      	ldrb	r2, [r5, #25]
     5d6:	0112      	lsls	r2, r2, #4
     5d8:	2130      	movs	r1, #48	; 0x30
     5da:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
     5dc:	7e28      	ldrb	r0, [r5, #24]
     5de:	2207      	movs	r2, #7
     5e0:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
     5e2:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
     5e4:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
     5e6:	2080      	movs	r0, #128	; 0x80
     5e8:	0240      	lsls	r0, r0, #9
     5ea:	000e      	movs	r6, r1
     5ec:	e002      	b.n	5f4 <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
     5ee:	3201      	adds	r2, #1
     5f0:	2a04      	cmp	r2, #4
     5f2:	d00b      	beq.n	60c <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
     5f4:	18a9      	adds	r1, r5, r2
     5f6:	7d09      	ldrb	r1, [r1, #20]
     5f8:	2900      	cmp	r1, #0
     5fa:	d0f8      	beq.n	5ee <tcc_init+0x276>
			if (n >= cc_num) {
     5fc:	9905      	ldr	r1, [sp, #20]
     5fe:	4291      	cmp	r1, r2
     600:	dc00      	bgt.n	604 <tcc_init+0x28c>
     602:	e0b3      	b.n	76c <tcc_init+0x3f4>
			wave |= (TCC_WAVE_POL0 << n);
     604:	0001      	movs	r1, r0
     606:	4091      	lsls	r1, r2
     608:	430e      	orrs	r6, r1
     60a:	e7f0      	b.n	5ee <tcc_init+0x276>
     60c:	46b2      	mov	sl, r6
     60e:	9801      	ldr	r0, [sp, #4]
     610:	0002      	movs	r2, r0
     612:	3204      	adds	r2, #4
     614:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
     616:	2100      	movs	r1, #0
     618:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     61a:	4282      	cmp	r2, r0
     61c:	d1fc      	bne.n	618 <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
     61e:	2200      	movs	r2, #0
     620:	9801      	ldr	r0, [sp, #4]
     622:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
     624:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
     626:	0099      	lsls	r1, r3, #2
     628:	4a22      	ldr	r2, [pc, #136]	; (6b4 <tcc_init+0x33c>)
     62a:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
     62c:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
     62e:	22a0      	movs	r2, #160	; 0xa0
     630:	5ca9      	ldrb	r1, [r5, r2]
     632:	3a64      	subs	r2, #100	; 0x64
     634:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
     636:	a90d      	add	r1, sp, #52	; 0x34
     638:	7aaa      	ldrb	r2, [r5, #10]
     63a:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
     63c:	4a1e      	ldr	r2, [pc, #120]	; (6b8 <tcc_init+0x340>)
     63e:	5cd6      	ldrb	r6, [r2, r3]
     640:	0030      	movs	r0, r6
     642:	4b1e      	ldr	r3, [pc, #120]	; (6bc <tcc_init+0x344>)
     644:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
     646:	0030      	movs	r0, r6
     648:	4b1d      	ldr	r3, [pc, #116]	; (6c0 <tcc_init+0x348>)
     64a:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
     64c:	464b      	mov	r3, r9
     64e:	2b00      	cmp	r3, #0
     650:	dd3c      	ble.n	6cc <tcc_init+0x354>
     652:	002e      	movs	r6, r5
     654:	3658      	adds	r6, #88	; 0x58
     656:	3398      	adds	r3, #152	; 0x98
     658:	4698      	mov	r8, r3
     65a:	44a8      	add	r8, r5
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     65c:	2301      	movs	r3, #1
     65e:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
     660:	46ab      	mov	fp, r5
     662:	4645      	mov	r5, r8
     664:	46a0      	mov	r8, r4
     666:	9c08      	ldr	r4, [sp, #32]
     668:	e003      	b.n	672 <tcc_init+0x2fa>
     66a:	3401      	adds	r4, #1
     66c:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
     66e:	42ac      	cmp	r4, r5
     670:	d02a      	beq.n	6c8 <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
     672:	7823      	ldrb	r3, [r4, #0]
     674:	2b00      	cmp	r3, #0
     676:	d0f8      	beq.n	66a <tcc_init+0x2f2>
     678:	ab0c      	add	r3, sp, #48	; 0x30
     67a:	464a      	mov	r2, r9
     67c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     67e:	2300      	movs	r3, #0
     680:	aa0c      	add	r2, sp, #48	; 0x30
     682:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
     684:	0013      	movs	r3, r2
     686:	2220      	movs	r2, #32
     688:	18b2      	adds	r2, r6, r2
     68a:	7812      	ldrb	r2, [r2, #0]
     68c:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     68e:	464a      	mov	r2, r9
     690:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
     692:	7830      	ldrb	r0, [r6, #0]
     694:	0019      	movs	r1, r3
     696:	4b0b      	ldr	r3, [pc, #44]	; (6c4 <tcc_init+0x34c>)
     698:	4798      	blx	r3
     69a:	e7e6      	b.n	66a <tcc_init+0x2f2>
     69c:	000001f9 	.word	0x000001f9
     6a0:	40000400 	.word	0x40000400
     6a4:	000014c4 	.word	0x000014c4
     6a8:	000014d8 	.word	0x000014d8
     6ac:	000014e4 	.word	0x000014e4
     6b0:	000014d0 	.word	0x000014d0
     6b4:	200000b4 	.word	0x200000b4
     6b8:	000014d4 	.word	0x000014d4
     6bc:	000011b9 	.word	0x000011b9
     6c0:	0000112d 	.word	0x0000112d
     6c4:	0000127d 	.word	0x0000127d
     6c8:	4644      	mov	r4, r8
     6ca:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
     6cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     6ce:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
     6d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
     6d2:	0212      	lsls	r2, r2, #8
     6d4:	4313      	orrs	r3, r2
     6d6:	9a02      	ldr	r2, [sp, #8]
     6d8:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
     6da:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     6dc:	2204      	movs	r2, #4
     6de:	68a3      	ldr	r3, [r4, #8]
     6e0:	421a      	tst	r2, r3
     6e2:	d1fc      	bne.n	6de <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
     6e4:	23ff      	movs	r3, #255	; 0xff
     6e6:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     6e8:	2204      	movs	r2, #4
     6ea:	68a3      	ldr	r3, [r4, #8]
     6ec:	421a      	tst	r2, r3
     6ee:	d1fc      	bne.n	6ea <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
     6f0:	466b      	mov	r3, sp
     6f2:	7e1b      	ldrb	r3, [r3, #24]
     6f4:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
     6f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
     6f8:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
     6fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
     6fc:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
     6fe:	61a7      	str	r7, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
     700:	4a1d      	ldr	r2, [pc, #116]	; (778 <tcc_init+0x400>)
     702:	68a3      	ldr	r3, [r4, #8]
     704:	4213      	tst	r3, r2
     706:	d1fc      	bne.n	702 <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
     708:	4653      	mov	r3, sl
     70a:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
     70c:	2210      	movs	r2, #16
     70e:	68a3      	ldr	r3, [r4, #8]
     710:	421a      	tst	r2, r3
     712:	d1fc      	bne.n	70e <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
     714:	682b      	ldr	r3, [r5, #0]
     716:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
     718:	4a18      	ldr	r2, [pc, #96]	; (77c <tcc_init+0x404>)
     71a:	68a3      	ldr	r3, [r4, #8]
     71c:	4213      	tst	r3, r2
     71e:	d1fc      	bne.n	71a <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
     720:	686b      	ldr	r3, [r5, #4]
     722:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
     724:	9805      	ldr	r0, [sp, #20]
     726:	2800      	cmp	r0, #0
     728:	dd22      	ble.n	770 <tcc_init+0x3f8>
     72a:	351c      	adds	r5, #28
     72c:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
     72e:	4e14      	ldr	r6, [pc, #80]	; (780 <tcc_init+0x408>)
     730:	0032      	movs	r2, r6
     732:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
     734:	68a3      	ldr	r3, [r4, #8]
     736:	421a      	tst	r2, r3
     738:	d1fc      	bne.n	734 <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
     73a:	cd04      	ldmia	r5!, {r2}
     73c:	000b      	movs	r3, r1
     73e:	3310      	adds	r3, #16
     740:	009b      	lsls	r3, r3, #2
     742:	18e3      	adds	r3, r4, r3
     744:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
     746:	3101      	adds	r1, #1
     748:	4288      	cmp	r0, r1
     74a:	dcf1      	bgt.n	730 <tcc_init+0x3b8>
	return STATUS_OK;
     74c:	2000      	movs	r0, #0
     74e:	e62d      	b.n	3ac <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
     750:	2017      	movs	r0, #23
     752:	e62b      	b.n	3ac <tcc_init+0x34>
     754:	2017      	movs	r0, #23
     756:	e629      	b.n	3ac <tcc_init+0x34>
     758:	2017      	movs	r0, #23
     75a:	e627      	b.n	3ac <tcc_init+0x34>
     75c:	2017      	movs	r0, #23
     75e:	e625      	b.n	3ac <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
     760:	2017      	movs	r0, #23
     762:	e623      	b.n	3ac <tcc_init+0x34>
			if (i >= ow_num) {
     764:	2017      	movs	r0, #23
     766:	e621      	b.n	3ac <tcc_init+0x34>
			if (i >= ow_num) {
     768:	2017      	movs	r0, #23
     76a:	e61f      	b.n	3ac <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
     76c:	2017      	movs	r0, #23
     76e:	e61d      	b.n	3ac <tcc_init+0x34>
	return STATUS_OK;
     770:	2000      	movs	r0, #0
     772:	e61b      	b.n	3ac <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
     774:	2017      	movs	r0, #23
     776:	e619      	b.n	3ac <tcc_init+0x34>
     778:	00020040 	.word	0x00020040
     77c:	00040080 	.word	0x00040080
     780:	00080100 	.word	0x00080100

00000784 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     784:	b5f0      	push	{r4, r5, r6, r7, lr}
     786:	46c6      	mov	lr, r8
     788:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     78a:	0080      	lsls	r0, r0, #2
     78c:	4b0e      	ldr	r3, [pc, #56]	; (7c8 <_tcc_interrupt_handler+0x44>)
     78e:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     790:	683b      	ldr	r3, [r7, #0]
     792:	6ade      	ldr	r6, [r3, #44]	; 0x2c
     794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     796:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     798:	4013      	ands	r3, r2
     79a:	401e      	ands	r6, r3
     79c:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     79e:	4b0b      	ldr	r3, [pc, #44]	; (7cc <_tcc_interrupt_handler+0x48>)
     7a0:	4698      	mov	r8, r3
     7a2:	e002      	b.n	7aa <_tcc_interrupt_handler+0x26>
     7a4:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     7a6:	2c30      	cmp	r4, #48	; 0x30
     7a8:	d00a      	beq.n	7c0 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     7aa:	4643      	mov	r3, r8
     7ac:	58e5      	ldr	r5, [r4, r3]
     7ae:	4235      	tst	r5, r6
     7b0:	d0f8      	beq.n	7a4 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     7b2:	193b      	adds	r3, r7, r4
     7b4:	685b      	ldr	r3, [r3, #4]
     7b6:	0038      	movs	r0, r7
     7b8:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     7ba:	683b      	ldr	r3, [r7, #0]
     7bc:	62dd      	str	r5, [r3, #44]	; 0x2c
     7be:	e7f1      	b.n	7a4 <_tcc_interrupt_handler+0x20>
		}
	}
}
     7c0:	bc04      	pop	{r2}
     7c2:	4690      	mov	r8, r2
     7c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     7c6:	46c0      	nop			; (mov r8, r8)
     7c8:	200000b4 	.word	0x200000b4
     7cc:	000014e8 	.word	0x000014e8

000007d0 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     7d0:	b510      	push	{r4, lr}
     7d2:	2000      	movs	r0, #0
     7d4:	4b01      	ldr	r3, [pc, #4]	; (7dc <TCC0_Handler+0xc>)
     7d6:	4798      	blx	r3
     7d8:	bd10      	pop	{r4, pc}
     7da:	46c0      	nop			; (mov r8, r8)
     7dc:	00000785 	.word	0x00000785

000007e0 <TCC1_Handler>:
     7e0:	b510      	push	{r4, lr}
     7e2:	2001      	movs	r0, #1
     7e4:	4b01      	ldr	r3, [pc, #4]	; (7ec <TCC1_Handler+0xc>)
     7e6:	4798      	blx	r3
     7e8:	bd10      	pop	{r4, pc}
     7ea:	46c0      	nop			; (mov r8, r8)
     7ec:	00000785 	.word	0x00000785

000007f0 <TCC2_Handler>:
     7f0:	b510      	push	{r4, lr}
     7f2:	2002      	movs	r0, #2
     7f4:	4b01      	ldr	r3, [pc, #4]	; (7fc <TCC2_Handler+0xc>)
     7f6:	4798      	blx	r3
     7f8:	bd10      	pop	{r4, pc}
     7fa:	46c0      	nop			; (mov r8, r8)
     7fc:	00000785 	.word	0x00000785

00000800 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
     800:	b5f0      	push	{r4, r5, r6, r7, lr}
     802:	46de      	mov	lr, fp
     804:	4657      	mov	r7, sl
     806:	464e      	mov	r6, r9
     808:	4645      	mov	r5, r8
     80a:	b5e0      	push	{r5, r6, r7, lr}
     80c:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
     80e:	4bc2      	ldr	r3, [pc, #776]	; (b18 <USB_Handler+0x318>)
     810:	681f      	ldr	r7, [r3, #0]
     812:	683d      	ldr	r5, [r7, #0]
     814:	782b      	ldrb	r3, [r5, #0]
     816:	09db      	lsrs	r3, r3, #7
     818:	d114      	bne.n	844 <USB_Handler+0x44>
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
     81a:	8c2e      	ldrh	r6, [r5, #32]
     81c:	b2b6      	uxth	r6, r6
	if (0 == ep_inst) {
     81e:	2e00      	cmp	r6, #0
     820:	d000      	beq.n	824 <USB_Handler+0x24>
     822:	e1a9      	b.n	b78 <USB_Handler+0x378>
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
     824:	8bae      	ldrh	r6, [r5, #28]
     826:	b2b6      	uxth	r6, r6
				_usb_instances->device_enabled_callback_mask &
     828:	23ab      	movs	r3, #171	; 0xab
     82a:	005b      	lsls	r3, r3, #1
		flags_run = flags &
     82c:	5afb      	ldrh	r3, [r7, r3]
     82e:	22aa      	movs	r2, #170	; 0xaa
     830:	0052      	lsls	r2, r2, #1
     832:	5abd      	ldrh	r5, [r7, r2]
     834:	401d      	ands	r5, r3
     836:	4035      	ands	r5, r6
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
     838:	2400      	movs	r4, #0
			if (flags & _usb_device_irq_bits[i]) {
     83a:	4fb8      	ldr	r7, [pc, #736]	; (b1c <USB_Handler+0x31c>)
				_usb_instances->hw->DEVICE.INTFLAG.reg =
     83c:	4bb6      	ldr	r3, [pc, #728]	; (b18 <USB_Handler+0x318>)
     83e:	4699      	mov	r9, r3
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
     840:	4698      	mov	r8, r3
     842:	e184      	b.n	b4e <USB_Handler+0x34e>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
     844:	8c2b      	ldrh	r3, [r5, #32]
     846:	b29b      	uxth	r3, r3
     848:	2b00      	cmp	r3, #0
     84a:	d100      	bne.n	84e <USB_Handler+0x4e>
     84c:	e0de      	b.n	a0c <USB_Handler+0x20c>
     84e:	8c28      	ldrh	r0, [r5, #32]
     850:	b280      	uxth	r0, r0
     852:	4bb3      	ldr	r3, [pc, #716]	; (b20 <USB_Handler+0x320>)
     854:	4798      	blx	r3
     856:	0004      	movs	r4, r0
	if (pipe_int < 32) {
     858:	281f      	cmp	r0, #31
     85a:	d900      	bls.n	85e <USB_Handler+0x5e>
     85c:	e0d6      	b.n	a0c <USB_Handler+0x20c>
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
     85e:	0003      	movs	r3, r0
     860:	3308      	adds	r3, #8
     862:	015b      	lsls	r3, r3, #5
     864:	18ed      	adds	r5, r5, r3
     866:	79ed      	ldrb	r5, [r5, #7]
     868:	b2ed      	uxtb	r5, r5
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
     86a:	07ab      	lsls	r3, r5, #30
     86c:	d041      	beq.n	8f2 <USB_Handler+0xf2>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
     86e:	4aad      	ldr	r2, [pc, #692]	; (b24 <USB_Handler+0x324>)
     870:	2301      	movs	r3, #1
     872:	4083      	lsls	r3, r0
     874:	6811      	ldr	r1, [r2, #0]
     876:	4399      	bics	r1, r3
     878:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
     87a:	0003      	movs	r3, r0
     87c:	3308      	adds	r3, #8
     87e:	015b      	lsls	r3, r3, #5
     880:	683a      	ldr	r2, [r7, #0]
     882:	4694      	mov	ip, r2
     884:	4463      	add	r3, ip
     886:	2203      	movs	r2, #3
     888:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
     88a:	183b      	adds	r3, r7, r0
     88c:	33ae      	adds	r3, #174	; 0xae
     88e:	781b      	ldrb	r3, [r3, #0]
     890:	07db      	lsls	r3, r3, #31
     892:	d52e      	bpl.n	8f2 <USB_Handler+0xf2>
				pipe_callback_para.pipe_num = pipe_int;
     894:	4ba4      	ldr	r3, [pc, #656]	; (b28 <USB_Handler+0x328>)
     896:	7018      	strb	r0, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
     898:	683a      	ldr	r2, [r7, #0]
     89a:	0003      	movs	r3, r0
     89c:	3308      	adds	r3, #8
     89e:	015b      	lsls	r3, r3, #5
     8a0:	5c9b      	ldrb	r3, [r3, r2]
     8a2:	079b      	lsls	r3, r3, #30
     8a4:	0f9b      	lsrs	r3, r3, #30
     8a6:	2b01      	cmp	r3, #1
     8a8:	d100      	bne.n	8ac <USB_Handler+0xac>
     8aa:	e081      	b.n	9b0 <USB_Handler+0x1b0>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
     8ac:	0142      	lsls	r2, r0, #5
     8ae:	4b9f      	ldr	r3, [pc, #636]	; (b2c <USB_Handler+0x32c>)
     8b0:	189b      	adds	r3, r3, r2
     8b2:	685a      	ldr	r2, [r3, #4]
     8b4:	0112      	lsls	r2, r2, #4
     8b6:	0c92      	lsrs	r2, r2, #18
     8b8:	b290      	uxth	r0, r2
     8ba:	499b      	ldr	r1, [pc, #620]	; (b28 <USB_Handler+0x328>)
     8bc:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
     8be:	685a      	ldr	r2, [r3, #4]
     8c0:	0492      	lsls	r2, r2, #18
     8c2:	0c92      	lsrs	r2, r2, #18
     8c4:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
     8c6:	685a      	ldr	r2, [r3, #4]
     8c8:	4999      	ldr	r1, [pc, #612]	; (b30 <USB_Handler+0x330>)
     8ca:	400a      	ands	r2, r1
     8cc:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
     8ce:	2800      	cmp	r0, #0
     8d0:	d107      	bne.n	8e2 <USB_Handler+0xe2>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
     8d2:	0162      	lsls	r2, r4, #5
     8d4:	4b95      	ldr	r3, [pc, #596]	; (b2c <USB_Handler+0x32c>)
     8d6:	189b      	adds	r3, r3, r2
     8d8:	685b      	ldr	r3, [r3, #4]
     8da:	049b      	lsls	r3, r3, #18
     8dc:	0c9b      	lsrs	r3, r3, #18
     8de:	4a92      	ldr	r2, [pc, #584]	; (b28 <USB_Handler+0x328>)
     8e0:	8053      	strh	r3, [r2, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
     8e2:	4b8d      	ldr	r3, [pc, #564]	; (b18 <USB_Handler+0x318>)
     8e4:	6818      	ldr	r0, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
     8e6:	1ca3      	adds	r3, r4, #2
     8e8:	011b      	lsls	r3, r3, #4
     8ea:	18c3      	adds	r3, r0, r3
     8ec:	685b      	ldr	r3, [r3, #4]
     8ee:	498e      	ldr	r1, [pc, #568]	; (b28 <USB_Handler+0x328>)
     8f0:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
     8f2:	076b      	lsls	r3, r5, #29
     8f4:	d50e      	bpl.n	914 <USB_Handler+0x114>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
     8f6:	4a8b      	ldr	r2, [pc, #556]	; (b24 <USB_Handler+0x324>)
     8f8:	2301      	movs	r3, #1
     8fa:	40a3      	lsls	r3, r4
     8fc:	6811      	ldr	r1, [r2, #0]
     8fe:	4399      	bics	r1, r3
     900:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
     902:	4b85      	ldr	r3, [pc, #532]	; (b18 <USB_Handler+0x318>)
     904:	681b      	ldr	r3, [r3, #0]
     906:	681b      	ldr	r3, [r3, #0]
     908:	0022      	movs	r2, r4
     90a:	3208      	adds	r2, #8
     90c:	0152      	lsls	r2, r2, #5
     90e:	189b      	adds	r3, r3, r2
     910:	2204      	movs	r2, #4
     912:	71da      	strb	r2, [r3, #7]
		if (flags & USB_HOST_PINTFLAG_PERR) {
     914:	072b      	lsls	r3, r5, #28
     916:	d514      	bpl.n	942 <USB_Handler+0x142>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
     918:	4a82      	ldr	r2, [pc, #520]	; (b24 <USB_Handler+0x324>)
     91a:	2301      	movs	r3, #1
     91c:	40a3      	lsls	r3, r4
     91e:	6811      	ldr	r1, [r2, #0]
     920:	4399      	bics	r1, r3
     922:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
     924:	4b7c      	ldr	r3, [pc, #496]	; (b18 <USB_Handler+0x318>)
     926:	6818      	ldr	r0, [r3, #0]
     928:	0023      	movs	r3, r4
     92a:	3308      	adds	r3, #8
     92c:	015b      	lsls	r3, r3, #5
     92e:	6802      	ldr	r2, [r0, #0]
     930:	4694      	mov	ip, r2
     932:	4463      	add	r3, ip
     934:	2208      	movs	r2, #8
     936:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
     938:	1903      	adds	r3, r0, r4
     93a:	33ae      	adds	r3, #174	; 0xae
     93c:	781b      	ldrb	r3, [r3, #0]
     93e:	079b      	lsls	r3, r3, #30
     940:	d447      	bmi.n	9d2 <USB_Handler+0x1d2>
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
     942:	06eb      	lsls	r3, r5, #27
     944:	d514      	bpl.n	970 <USB_Handler+0x170>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
     946:	4a77      	ldr	r2, [pc, #476]	; (b24 <USB_Handler+0x324>)
     948:	2301      	movs	r3, #1
     94a:	40a3      	lsls	r3, r4
     94c:	6811      	ldr	r1, [r2, #0]
     94e:	4399      	bics	r1, r3
     950:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
     952:	4b71      	ldr	r3, [pc, #452]	; (b18 <USB_Handler+0x318>)
     954:	6818      	ldr	r0, [r3, #0]
     956:	0023      	movs	r3, r4
     958:	3308      	adds	r3, #8
     95a:	015b      	lsls	r3, r3, #5
     95c:	6802      	ldr	r2, [r0, #0]
     95e:	4694      	mov	ip, r2
     960:	4463      	add	r3, ip
     962:	2210      	movs	r2, #16
     964:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
     966:	1903      	adds	r3, r0, r4
     968:	33ae      	adds	r3, #174	; 0xae
     96a:	781b      	ldrb	r3, [r3, #0]
     96c:	075b      	lsls	r3, r3, #29
     96e:	d43e      	bmi.n	9ee <USB_Handler+0x1ee>
		if (flags & USB_HOST_PINTFLAG_STALL) {
     970:	06ab      	lsls	r3, r5, #26
     972:	d400      	bmi.n	976 <USB_Handler+0x176>
     974:	e0b0      	b.n	ad8 <USB_Handler+0x2d8>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
     976:	4a6b      	ldr	r2, [pc, #428]	; (b24 <USB_Handler+0x324>)
     978:	2301      	movs	r3, #1
     97a:	40a3      	lsls	r3, r4
     97c:	6811      	ldr	r1, [r2, #0]
     97e:	4399      	bics	r1, r3
     980:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
     982:	4b65      	ldr	r3, [pc, #404]	; (b18 <USB_Handler+0x318>)
     984:	6818      	ldr	r0, [r3, #0]
     986:	0023      	movs	r3, r4
     988:	3308      	adds	r3, #8
     98a:	015b      	lsls	r3, r3, #5
     98c:	6802      	ldr	r2, [r0, #0]
     98e:	4694      	mov	ip, r2
     990:	4463      	add	r3, ip
     992:	2220      	movs	r2, #32
     994:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
     996:	1903      	adds	r3, r0, r4
     998:	33ae      	adds	r3, #174	; 0xae
     99a:	781b      	ldrb	r3, [r3, #0]
     99c:	071b      	lsls	r3, r3, #28
     99e:	d400      	bmi.n	9a2 <USB_Handler+0x1a2>
     9a0:	e09a      	b.n	ad8 <USB_Handler+0x2d8>
				pipe_callback_para.pipe_num = pipe_int;
     9a2:	4961      	ldr	r1, [pc, #388]	; (b28 <USB_Handler+0x328>)
     9a4:	700c      	strb	r4, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
     9a6:	0124      	lsls	r4, r4, #4
     9a8:	1904      	adds	r4, r0, r4
     9aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
     9ac:	4798      	blx	r3
     9ae:	e093      	b.n	ad8 <USB_Handler+0x2d8>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
     9b0:	0142      	lsls	r2, r0, #5
     9b2:	4b5e      	ldr	r3, [pc, #376]	; (b2c <USB_Handler+0x32c>)
     9b4:	189b      	adds	r3, r3, r2
     9b6:	685a      	ldr	r2, [r3, #4]
     9b8:	0492      	lsls	r2, r2, #18
     9ba:	0c92      	lsrs	r2, r2, #18
     9bc:	495a      	ldr	r1, [pc, #360]	; (b28 <USB_Handler+0x328>)
     9be:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
     9c0:	685a      	ldr	r2, [r3, #4]
     9c2:	0112      	lsls	r2, r2, #4
     9c4:	0c92      	lsrs	r2, r2, #18
     9c6:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
     9c8:	685a      	ldr	r2, [r3, #4]
     9ca:	0b92      	lsrs	r2, r2, #14
     9cc:	0392      	lsls	r2, r2, #14
     9ce:	605a      	str	r2, [r3, #4]
     9d0:	e787      	b.n	8e2 <USB_Handler+0xe2>
				pipe_callback_para.pipe_num = pipe_int;
     9d2:	4955      	ldr	r1, [pc, #340]	; (b28 <USB_Handler+0x328>)
     9d4:	700c      	strb	r4, [r1, #0]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
     9d6:	0162      	lsls	r2, r4, #5
     9d8:	4b54      	ldr	r3, [pc, #336]	; (b2c <USB_Handler+0x32c>)
     9da:	189b      	adds	r3, r3, r2
     9dc:	89db      	ldrh	r3, [r3, #14]
     9de:	221f      	movs	r2, #31
     9e0:	4013      	ands	r3, r2
				pipe_callback_para.pipe_error_status =
     9e2:	704b      	strb	r3, [r1, #1]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
     9e4:	0123      	lsls	r3, r4, #4
     9e6:	18c3      	adds	r3, r0, r3
     9e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     9ea:	4798      	blx	r3
     9ec:	e7a9      	b.n	942 <USB_Handler+0x142>
				pipe_callback_para.pipe_num = pipe_int;
     9ee:	494e      	ldr	r1, [pc, #312]	; (b28 <USB_Handler+0x328>)
     9f0:	700c      	strb	r4, [r1, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
     9f2:	0162      	lsls	r2, r4, #5
     9f4:	4b4d      	ldr	r3, [pc, #308]	; (b2c <USB_Handler+0x32c>)
     9f6:	189b      	adds	r3, r3, r2
     9f8:	685b      	ldr	r3, [r3, #4]
     9fa:	011b      	lsls	r3, r3, #4
     9fc:	0c9b      	lsrs	r3, r3, #18
     9fe:	804b      	strh	r3, [r1, #2]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
     a00:	0123      	lsls	r3, r4, #4
     a02:	18c3      	adds	r3, r0, r3
     a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     a06:	2100      	movs	r1, #0
     a08:	4798      	blx	r3
     a0a:	e7b1      	b.n	970 <USB_Handler+0x170>
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
     a0c:	8bac      	ldrh	r4, [r5, #28]
     a0e:	b2a4      	uxth	r4, r4
		if (flags & USB_HOST_INTFLAG_HSOF) {
     a10:	0763      	lsls	r3, r4, #29
     a12:	d505      	bpl.n	a20 <USB_Handler+0x220>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
     a14:	2304      	movs	r3, #4
     a16:	83ab      	strh	r3, [r5, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
     a18:	33a1      	adds	r3, #161	; 0xa1
     a1a:	5cfb      	ldrb	r3, [r7, r3]
     a1c:	07db      	lsls	r3, r3, #31
     a1e:	d462      	bmi.n	ae6 <USB_Handler+0x2e6>
		if (flags & USB_HOST_INTFLAG_RST) {
     a20:	0723      	lsls	r3, r4, #28
     a22:	d50b      	bpl.n	a3c <USB_Handler+0x23c>
			host_pipe_job_busy_status = 0;
     a24:	2200      	movs	r2, #0
     a26:	4b3f      	ldr	r3, [pc, #252]	; (b24 <USB_Handler+0x324>)
     a28:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
     a2a:	4b3b      	ldr	r3, [pc, #236]	; (b18 <USB_Handler+0x318>)
     a2c:	6818      	ldr	r0, [r3, #0]
     a2e:	2308      	movs	r3, #8
     a30:	6802      	ldr	r2, [r0, #0]
     a32:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
     a34:	339d      	adds	r3, #157	; 0x9d
     a36:	5cc3      	ldrb	r3, [r0, r3]
     a38:	079b      	lsls	r3, r3, #30
     a3a:	d458      	bmi.n	aee <USB_Handler+0x2ee>
		if (flags & USB_HOST_INTFLAG_UPRSM) {
     a3c:	0663      	lsls	r3, r4, #25
     a3e:	d508      	bpl.n	a52 <USB_Handler+0x252>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
     a40:	4b35      	ldr	r3, [pc, #212]	; (b18 <USB_Handler+0x318>)
     a42:	6818      	ldr	r0, [r3, #0]
     a44:	2340      	movs	r3, #64	; 0x40
     a46:	6802      	ldr	r2, [r0, #0]
     a48:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
     a4a:	3365      	adds	r3, #101	; 0x65
     a4c:	5cc3      	ldrb	r3, [r0, r3]
     a4e:	06db      	lsls	r3, r3, #27
     a50:	d450      	bmi.n	af4 <USB_Handler+0x2f4>
		if (flags & USB_HOST_INTFLAG_DNRSM) {
     a52:	06a3      	lsls	r3, r4, #26
     a54:	d508      	bpl.n	a68 <USB_Handler+0x268>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
     a56:	4b30      	ldr	r3, [pc, #192]	; (b18 <USB_Handler+0x318>)
     a58:	6818      	ldr	r0, [r3, #0]
     a5a:	2320      	movs	r3, #32
     a5c:	6802      	ldr	r2, [r0, #0]
     a5e:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
     a60:	3385      	adds	r3, #133	; 0x85
     a62:	5cc3      	ldrb	r3, [r0, r3]
     a64:	071b      	lsls	r3, r3, #28
     a66:	d448      	bmi.n	afa <USB_Handler+0x2fa>
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
     a68:	06e3      	lsls	r3, r4, #27
     a6a:	d508      	bpl.n	a7e <USB_Handler+0x27e>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
     a6c:	4b2a      	ldr	r3, [pc, #168]	; (b18 <USB_Handler+0x318>)
     a6e:	6818      	ldr	r0, [r3, #0]
     a70:	2310      	movs	r3, #16
     a72:	6802      	ldr	r2, [r0, #0]
     a74:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
     a76:	3395      	adds	r3, #149	; 0x95
     a78:	5cc3      	ldrb	r3, [r0, r3]
     a7a:	075b      	lsls	r3, r3, #29
     a7c:	d440      	bmi.n	b00 <USB_Handler+0x300>
		if (flags & USB_HOST_INTFLAG_RAMACER) {
     a7e:	0623      	lsls	r3, r4, #24
     a80:	d50b      	bpl.n	a9a <USB_Handler+0x29a>
			host_pipe_job_busy_status = 0;
     a82:	2200      	movs	r2, #0
     a84:	4b27      	ldr	r3, [pc, #156]	; (b24 <USB_Handler+0x324>)
     a86:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
     a88:	4b23      	ldr	r3, [pc, #140]	; (b18 <USB_Handler+0x318>)
     a8a:	6818      	ldr	r0, [r3, #0]
     a8c:	2380      	movs	r3, #128	; 0x80
     a8e:	6802      	ldr	r2, [r0, #0]
     a90:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
     a92:	3325      	adds	r3, #37	; 0x25
     a94:	5cc3      	ldrb	r3, [r0, r3]
     a96:	069b      	lsls	r3, r3, #26
     a98:	d435      	bmi.n	b06 <USB_Handler+0x306>
		if (flags & USB_HOST_INTFLAG_DCONN) {
     a9a:	05e3      	lsls	r3, r4, #23
     a9c:	d50c      	bpl.n	ab8 <USB_Handler+0x2b8>
			host_pipe_job_busy_status = 0;
     a9e:	2200      	movs	r2, #0
     aa0:	4b20      	ldr	r3, [pc, #128]	; (b24 <USB_Handler+0x324>)
     aa2:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
     aa4:	4b1c      	ldr	r3, [pc, #112]	; (b18 <USB_Handler+0x318>)
     aa6:	6818      	ldr	r0, [r3, #0]
     aa8:	2380      	movs	r3, #128	; 0x80
     aaa:	005b      	lsls	r3, r3, #1
     aac:	6802      	ldr	r2, [r0, #0]
     aae:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
     ab0:	3b5b      	subs	r3, #91	; 0x5b
     ab2:	5cc3      	ldrb	r3, [r0, r3]
     ab4:	065b      	lsls	r3, r3, #25
     ab6:	d429      	bmi.n	b0c <USB_Handler+0x30c>
		if (flags & USB_HOST_INTFLAG_DDISC) {
     ab8:	05a3      	lsls	r3, r4, #22
     aba:	d50d      	bpl.n	ad8 <USB_Handler+0x2d8>
			host_pipe_job_busy_status = 0;
     abc:	2200      	movs	r2, #0
     abe:	4b19      	ldr	r3, [pc, #100]	; (b24 <USB_Handler+0x324>)
     ac0:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
     ac2:	4b15      	ldr	r3, [pc, #84]	; (b18 <USB_Handler+0x318>)
     ac4:	6818      	ldr	r0, [r3, #0]
     ac6:	2380      	movs	r3, #128	; 0x80
     ac8:	009b      	lsls	r3, r3, #2
     aca:	6802      	ldr	r2, [r0, #0]
     acc:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
     ace:	3b5c      	subs	r3, #92	; 0x5c
     ad0:	3bff      	subs	r3, #255	; 0xff
     ad2:	5cc3      	ldrb	r3, [r0, r3]
     ad4:	2b7f      	cmp	r3, #127	; 0x7f
     ad6:	d81c      	bhi.n	b12 <USB_Handler+0x312>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
     ad8:	b003      	add	sp, #12
     ada:	bc3c      	pop	{r2, r3, r4, r5}
     adc:	4690      	mov	r8, r2
     ade:	4699      	mov	r9, r3
     ae0:	46a2      	mov	sl, r4
     ae2:	46ab      	mov	fp, r5
     ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
     ae6:	687b      	ldr	r3, [r7, #4]
     ae8:	0038      	movs	r0, r7
     aea:	4798      	blx	r3
     aec:	e798      	b.n	a20 <USB_Handler+0x220>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
     aee:	6883      	ldr	r3, [r0, #8]
     af0:	4798      	blx	r3
     af2:	e7a3      	b.n	a3c <USB_Handler+0x23c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
     af4:	6943      	ldr	r3, [r0, #20]
     af6:	4798      	blx	r3
     af8:	e7ab      	b.n	a52 <USB_Handler+0x252>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
     afa:	6903      	ldr	r3, [r0, #16]
     afc:	4798      	blx	r3
     afe:	e7b3      	b.n	a68 <USB_Handler+0x268>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
     b00:	68c3      	ldr	r3, [r0, #12]
     b02:	4798      	blx	r3
     b04:	e7bb      	b.n	a7e <USB_Handler+0x27e>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
     b06:	6983      	ldr	r3, [r0, #24]
     b08:	4798      	blx	r3
     b0a:	e7c6      	b.n	a9a <USB_Handler+0x29a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
     b0c:	69c3      	ldr	r3, [r0, #28]
     b0e:	4798      	blx	r3
     b10:	e7d2      	b.n	ab8 <USB_Handler+0x2b8>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
     b12:	6a03      	ldr	r3, [r0, #32]
     b14:	4798      	blx	r3
     b16:	e7df      	b.n	ad8 <USB_Handler+0x2d8>
     b18:	20000038 	.word	0x20000038
     b1c:	00001518 	.word	0x00001518
     b20:	0000143d 	.word	0x0000143d
     b24:	20000048 	.word	0x20000048
     b28:	2000004c 	.word	0x2000004c
     b2c:	200000c0 	.word	0x200000c0
     b30:	f0003fff 	.word	0xf0003fff
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
     b34:	0023      	movs	r3, r4
     b36:	332e      	adds	r3, #46	; 0x2e
     b38:	009b      	lsls	r3, r3, #2
     b3a:	4642      	mov	r2, r8
     b3c:	6812      	ldr	r2, [r2, #0]
     b3e:	589b      	ldr	r3, [r3, r2]
     b40:	499e      	ldr	r1, [pc, #632]	; (dbc <USB_Handler+0x5bc>)
     b42:	4642      	mov	r2, r8
     b44:	6810      	ldr	r0, [r2, #0]
     b46:	4798      	blx	r3
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
     b48:	3401      	adds	r4, #1
     b4a:	2c07      	cmp	r4, #7
     b4c:	d0c4      	beq.n	ad8 <USB_Handler+0x2d8>
			if (flags & _usb_device_irq_bits[i]) {
     b4e:	0063      	lsls	r3, r4, #1
     b50:	5bdb      	ldrh	r3, [r3, r7]
     b52:	4233      	tst	r3, r6
     b54:	d003      	beq.n	b5e <USB_Handler+0x35e>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
     b56:	464a      	mov	r2, r9
     b58:	6812      	ldr	r2, [r2, #0]
     b5a:	6812      	ldr	r2, [r2, #0]
     b5c:	8393      	strh	r3, [r2, #28]
			if (flags_run & _usb_device_irq_bits[i]) {
     b5e:	422b      	tst	r3, r5
     b60:	d0f2      	beq.n	b48 <USB_Handler+0x348>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
     b62:	2c06      	cmp	r4, #6
     b64:	d1e6      	bne.n	b34 <USB_Handler+0x334>
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
     b66:	4b96      	ldr	r3, [pc, #600]	; (dc0 <USB_Handler+0x5c0>)
     b68:	891b      	ldrh	r3, [r3, #8]
     b6a:	091b      	lsrs	r3, r3, #4
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
     b6c:	2280      	movs	r2, #128	; 0x80
     b6e:	0052      	lsls	r2, r2, #1
     b70:	4013      	ands	r3, r2
     b72:	4a92      	ldr	r2, [pc, #584]	; (dbc <USB_Handler+0x5bc>)
     b74:	6013      	str	r3, [r2, #0]
     b76:	e7dd      	b.n	b34 <USB_Handler+0x334>
     b78:	003c      	movs	r4, r7
     b7a:	3459      	adds	r4, #89	; 0x59
     b7c:	34ff      	adds	r4, #255	; 0xff
	if (0 == ep_inst) {
     b7e:	2300      	movs	r3, #0
			if (ep_inst & (1 << i)) {
     b80:	2201      	movs	r2, #1
     b82:	4694      	mov	ip, r2
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
     b84:	325f      	adds	r2, #95	; 0x5f
     b86:	4691      	mov	r9, r2
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
     b88:	3a50      	subs	r2, #80	; 0x50
     b8a:	4692      	mov	sl, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
     b8c:	3a0d      	subs	r2, #13
     b8e:	4693      	mov	fp, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
     b90:	46b8      	mov	r8, r7
     b92:	002f      	movs	r7, r5
     b94:	e0b9      	b.n	d0a <USB_Handler+0x50a>
     b96:	002a      	movs	r2, r5
     b98:	003d      	movs	r5, r7
     b9a:	4647      	mov	r7, r8
     b9c:	4690      	mov	r8, r2
     b9e:	015b      	lsls	r3, r3, #5
     ba0:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
     ba2:	2308      	movs	r3, #8
     ba4:	33ff      	adds	r3, #255	; 0xff
     ba6:	5ceb      	ldrb	r3, [r5, r3]
     ba8:	065b      	lsls	r3, r3, #25
     baa:	d516      	bpl.n	bda <USB_Handler+0x3da>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
     bac:	2240      	movs	r2, #64	; 0x40
     bae:	2308      	movs	r3, #8
     bb0:	33ff      	adds	r3, #255	; 0xff
     bb2:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
     bb4:	3b88      	subs	r3, #136	; 0x88
     bb6:	3bff      	subs	r3, #255	; 0xff
     bb8:	4642      	mov	r2, r8
     bba:	4313      	orrs	r3, r2
     bbc:	4a81      	ldr	r2, [pc, #516]	; (dc4 <USB_Handler+0x5c4>)
     bbe:	7193      	strb	r3, [r2, #6]
					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
     bc0:	2360      	movs	r3, #96	; 0x60
     bc2:	420b      	tst	r3, r1
     bc4:	d100      	bne.n	bc8 <USB_Handler+0x3c8>
     bc6:	e787      	b.n	ad8 <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
     bc8:	9b01      	ldr	r3, [sp, #4]
     bca:	011b      	lsls	r3, r3, #4
     bcc:	18fb      	adds	r3, r7, r3
     bce:	33e0      	adds	r3, #224	; 0xe0
     bd0:	681b      	ldr	r3, [r3, #0]
     bd2:	497c      	ldr	r1, [pc, #496]	; (dc4 <USB_Handler+0x5c4>)
     bd4:	0038      	movs	r0, r7
     bd6:	4798      	blx	r3
     bd8:	e77e      	b.n	ad8 <USB_Handler+0x2d8>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
     bda:	2308      	movs	r3, #8
     bdc:	33ff      	adds	r3, #255	; 0xff
     bde:	5ceb      	ldrb	r3, [r5, r3]
     be0:	069b      	lsls	r3, r3, #26
     be2:	d5ed      	bpl.n	bc0 <USB_Handler+0x3c0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
     be4:	2220      	movs	r2, #32
     be6:	2308      	movs	r3, #8
     be8:	33ff      	adds	r3, #255	; 0xff
     bea:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
     bec:	4b75      	ldr	r3, [pc, #468]	; (dc4 <USB_Handler+0x5c4>)
     bee:	4642      	mov	r2, r8
     bf0:	719a      	strb	r2, [r3, #6]
     bf2:	e7e5      	b.n	bc0 <USB_Handler+0x3c0>
     bf4:	003d      	movs	r5, r7
     bf6:	4647      	mov	r7, r8
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
     bf8:	9a01      	ldr	r2, [sp, #4]
     bfa:	0013      	movs	r3, r2
     bfc:	3308      	adds	r3, #8
     bfe:	015b      	lsls	r3, r3, #5
     c00:	18ed      	adds	r5, r5, r3
     c02:	2310      	movs	r3, #16
     c04:	71eb      	strb	r3, [r5, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
     c06:	18bb      	adds	r3, r7, r2
     c08:	3361      	adds	r3, #97	; 0x61
     c0a:	33ff      	adds	r3, #255	; 0xff
     c0c:	781b      	ldrb	r3, [r3, #0]
     c0e:	06db      	lsls	r3, r3, #27
     c10:	d400      	bmi.n	c14 <USB_Handler+0x414>
     c12:	e761      	b.n	ad8 <USB_Handler+0x2d8>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
     c14:	0010      	movs	r0, r2
     c16:	0152      	lsls	r2, r2, #5
     c18:	4b69      	ldr	r3, [pc, #420]	; (dc0 <USB_Handler+0x5c0>)
     c1a:	189b      	adds	r3, r3, r2
     c1c:	685b      	ldr	r3, [r3, #4]
     c1e:	049b      	lsls	r3, r3, #18
     c20:	0c9b      	lsrs	r3, r3, #18
     c22:	4968      	ldr	r1, [pc, #416]	; (dc4 <USB_Handler+0x5c4>)
     c24:	800b      	strh	r3, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
     c26:	0103      	lsls	r3, r0, #4
     c28:	18fb      	adds	r3, r7, r3
     c2a:	33dc      	adds	r3, #220	; 0xdc
     c2c:	681b      	ldr	r3, [r3, #0]
     c2e:	4640      	mov	r0, r8
     c30:	4798      	blx	r3
     c32:	e751      	b.n	ad8 <USB_Handler+0x2d8>
     c34:	002a      	movs	r2, r5
     c36:	003d      	movs	r5, r7
     c38:	4647      	mov	r7, r8
     c3a:	4690      	mov	r8, r2
     c3c:	015b      	lsls	r3, r3, #5
     c3e:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
     c40:	2308      	movs	r3, #8
     c42:	33ff      	adds	r3, #255	; 0xff
     c44:	5ceb      	ldrb	r3, [r5, r3]
     c46:	079b      	lsls	r3, r3, #30
     c48:	d51e      	bpl.n	c88 <USB_Handler+0x488>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
     c4a:	2202      	movs	r2, #2
     c4c:	2308      	movs	r3, #8
     c4e:	33ff      	adds	r3, #255	; 0xff
     c50:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
     c52:	485c      	ldr	r0, [pc, #368]	; (dc4 <USB_Handler+0x5c4>)
     c54:	3b88      	subs	r3, #136	; 0x88
     c56:	3bff      	subs	r3, #255	; 0xff
     c58:	4642      	mov	r2, r8
     c5a:	4313      	orrs	r3, r2
     c5c:	7183      	strb	r3, [r0, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
     c5e:	9b01      	ldr	r3, [sp, #4]
     c60:	015a      	lsls	r2, r3, #5
     c62:	4b57      	ldr	r3, [pc, #348]	; (dc0 <USB_Handler+0x5c0>)
     c64:	189b      	adds	r3, r3, r2
     c66:	3310      	adds	r3, #16
     c68:	685b      	ldr	r3, [r3, #4]
     c6a:	049b      	lsls	r3, r3, #18
     c6c:	0c9b      	lsrs	r3, r3, #18
     c6e:	8043      	strh	r3, [r0, #2]
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
     c70:	078b      	lsls	r3, r1, #30
     c72:	d100      	bne.n	c76 <USB_Handler+0x476>
     c74:	e730      	b.n	ad8 <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
     c76:	9b01      	ldr	r3, [sp, #4]
     c78:	330d      	adds	r3, #13
     c7a:	011b      	lsls	r3, r3, #4
     c7c:	18fb      	adds	r3, r7, r3
     c7e:	685b      	ldr	r3, [r3, #4]
     c80:	4950      	ldr	r1, [pc, #320]	; (dc4 <USB_Handler+0x5c4>)
     c82:	0038      	movs	r0, r7
     c84:	4798      	blx	r3
     c86:	e727      	b.n	ad8 <USB_Handler+0x2d8>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
     c88:	2308      	movs	r3, #8
     c8a:	33ff      	adds	r3, #255	; 0xff
     c8c:	5ceb      	ldrb	r3, [r5, r3]
     c8e:	07db      	lsls	r3, r3, #31
     c90:	d5ee      	bpl.n	c70 <USB_Handler+0x470>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
     c92:	2201      	movs	r2, #1
     c94:	2308      	movs	r3, #8
     c96:	33ff      	adds	r3, #255	; 0xff
     c98:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
     c9a:	484a      	ldr	r0, [pc, #296]	; (dc4 <USB_Handler+0x5c4>)
     c9c:	4643      	mov	r3, r8
     c9e:	7183      	strb	r3, [r0, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
     ca0:	9b01      	ldr	r3, [sp, #4]
     ca2:	015b      	lsls	r3, r3, #5
     ca4:	4a46      	ldr	r2, [pc, #280]	; (dc0 <USB_Handler+0x5c0>)
     ca6:	18d2      	adds	r2, r2, r3
     ca8:	6853      	ldr	r3, [r2, #4]
     caa:	049b      	lsls	r3, r3, #18
     cac:	0c9b      	lsrs	r3, r3, #18
     cae:	8003      	strh	r3, [r0, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
     cb0:	6853      	ldr	r3, [r2, #4]
     cb2:	011b      	lsls	r3, r3, #4
     cb4:	0c9b      	lsrs	r3, r3, #18
     cb6:	8083      	strh	r3, [r0, #4]
     cb8:	e7da      	b.n	c70 <USB_Handler+0x470>
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
     cba:	2208      	movs	r2, #8
     cbc:	32ff      	adds	r2, #255	; 0xff
     cbe:	5c9a      	ldrb	r2, [r3, r2]
     cc0:	0752      	lsls	r2, r2, #29
     cc2:	d56e      	bpl.n	da2 <USB_Handler+0x5a2>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
     cc4:	2004      	movs	r0, #4
     cc6:	2208      	movs	r2, #8
     cc8:	32ff      	adds	r2, #255	; 0xff
     cca:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
     ccc:	9801      	ldr	r0, [sp, #4]
     cce:	0142      	lsls	r2, r0, #5
     cd0:	4b3b      	ldr	r3, [pc, #236]	; (dc0 <USB_Handler+0x5c0>)
     cd2:	189b      	adds	r3, r3, r2
     cd4:	7a9b      	ldrb	r3, [r3, #10]
     cd6:	079b      	lsls	r3, r3, #30
     cd8:	d505      	bpl.n	ce6 <USB_Handler+0x4e6>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
     cda:	4b39      	ldr	r3, [pc, #228]	; (dc0 <USB_Handler+0x5c0>)
     cdc:	189b      	adds	r3, r3, r2
     cde:	7a9a      	ldrb	r2, [r3, #10]
     ce0:	2002      	movs	r0, #2
     ce2:	4382      	bics	r2, r0
     ce4:	729a      	strb	r2, [r3, #10]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
     ce6:	4b37      	ldr	r3, [pc, #220]	; (dc4 <USB_Handler+0x5c4>)
     ce8:	4642      	mov	r2, r8
     cea:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
     cec:	9b01      	ldr	r3, [sp, #4]
     cee:	3308      	adds	r3, #8
     cf0:	015b      	lsls	r3, r3, #5
     cf2:	683a      	ldr	r2, [r7, #0]
     cf4:	4694      	mov	ip, r2
     cf6:	4463      	add	r3, ip
     cf8:	79db      	ldrb	r3, [r3, #7]
     cfa:	07db      	lsls	r3, r3, #31
     cfc:	d551      	bpl.n	da2 <USB_Handler+0x5a2>
     cfe:	e6eb      	b.n	ad8 <USB_Handler+0x2d8>
     d00:	3301      	adds	r3, #1
     d02:	3401      	adds	r4, #1
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
     d04:	2b08      	cmp	r3, #8
     d06:	d100      	bne.n	d0a <USB_Handler+0x50a>
     d08:	e6e6      	b.n	ad8 <USB_Handler+0x2d8>
     d0a:	b2dd      	uxtb	r5, r3
			if (ep_inst & (1 << i)) {
     d0c:	9301      	str	r3, [sp, #4]
     d0e:	0032      	movs	r2, r6
     d10:	411a      	asrs	r2, r3
     d12:	4661      	mov	r1, ip
     d14:	4211      	tst	r1, r2
     d16:	d0f3      	beq.n	d00 <USB_Handler+0x500>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
     d18:	001a      	movs	r2, r3
     d1a:	3208      	adds	r2, #8
     d1c:	0152      	lsls	r2, r2, #5
     d1e:	18ba      	adds	r2, r7, r2
     d20:	79d2      	ldrb	r2, [r2, #7]
     d22:	b2d2      	uxtb	r2, r2
     d24:	7a21      	ldrb	r1, [r4, #8]
     d26:	4011      	ands	r1, r2
     d28:	7820      	ldrb	r0, [r4, #0]
     d2a:	4001      	ands	r1, r0
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
     d2c:	4648      	mov	r0, r9
     d2e:	4210      	tst	r0, r2
     d30:	d000      	beq.n	d34 <USB_Handler+0x534>
     d32:	e730      	b.n	b96 <USB_Handler+0x396>
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
     d34:	4650      	mov	r0, sl
     d36:	4210      	tst	r0, r2
     d38:	d000      	beq.n	d3c <USB_Handler+0x53c>
     d3a:	e75b      	b.n	bf4 <USB_Handler+0x3f4>
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
     d3c:	4658      	mov	r0, fp
     d3e:	4210      	tst	r0, r2
     d40:	d000      	beq.n	d44 <USB_Handler+0x544>
     d42:	e777      	b.n	c34 <USB_Handler+0x434>
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
     d44:	200c      	movs	r0, #12
     d46:	4210      	tst	r0, r2
     d48:	d0da      	beq.n	d00 <USB_Handler+0x500>
     d4a:	002a      	movs	r2, r5
     d4c:	003d      	movs	r5, r7
     d4e:	4647      	mov	r7, r8
     d50:	4690      	mov	r8, r2
     d52:	015b      	lsls	r3, r3, #5
     d54:	18eb      	adds	r3, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
     d56:	2208      	movs	r2, #8
     d58:	32ff      	adds	r2, #255	; 0xff
     d5a:	5c9a      	ldrb	r2, [r3, r2]
     d5c:	0712      	lsls	r2, r2, #28
     d5e:	d5ac      	bpl.n	cba <USB_Handler+0x4ba>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
     d60:	3804      	subs	r0, #4
     d62:	2208      	movs	r2, #8
     d64:	32ff      	adds	r2, #255	; 0xff
     d66:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
     d68:	9801      	ldr	r0, [sp, #4]
     d6a:	0142      	lsls	r2, r0, #5
     d6c:	4b14      	ldr	r3, [pc, #80]	; (dc0 <USB_Handler+0x5c0>)
     d6e:	189b      	adds	r3, r3, r2
     d70:	7e9b      	ldrb	r3, [r3, #26]
     d72:	079b      	lsls	r3, r3, #30
     d74:	d505      	bpl.n	d82 <USB_Handler+0x582>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
     d76:	4b12      	ldr	r3, [pc, #72]	; (dc0 <USB_Handler+0x5c0>)
     d78:	189b      	adds	r3, r3, r2
     d7a:	7e9a      	ldrb	r2, [r3, #26]
     d7c:	2002      	movs	r0, #2
     d7e:	4382      	bics	r2, r0
     d80:	769a      	strb	r2, [r3, #26]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
     d82:	2380      	movs	r3, #128	; 0x80
     d84:	425b      	negs	r3, r3
     d86:	4642      	mov	r2, r8
     d88:	4313      	orrs	r3, r2
     d8a:	4a0e      	ldr	r2, [pc, #56]	; (dc4 <USB_Handler+0x5c4>)
     d8c:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
     d8e:	9b01      	ldr	r3, [sp, #4]
     d90:	3308      	adds	r3, #8
     d92:	015b      	lsls	r3, r3, #5
     d94:	683a      	ldr	r2, [r7, #0]
     d96:	4694      	mov	ip, r2
     d98:	4463      	add	r3, ip
     d9a:	79db      	ldrb	r3, [r3, #7]
     d9c:	079b      	lsls	r3, r3, #30
     d9e:	d500      	bpl.n	da2 <USB_Handler+0x5a2>
     da0:	e69a      	b.n	ad8 <USB_Handler+0x2d8>
					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
     da2:	230c      	movs	r3, #12
     da4:	420b      	tst	r3, r1
     da6:	d100      	bne.n	daa <USB_Handler+0x5aa>
     da8:	e696      	b.n	ad8 <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
     daa:	9b01      	ldr	r3, [sp, #4]
     dac:	011b      	lsls	r3, r3, #4
     dae:	18fb      	adds	r3, r7, r3
     db0:	33d8      	adds	r3, #216	; 0xd8
     db2:	681b      	ldr	r3, [r3, #0]
     db4:	4903      	ldr	r1, [pc, #12]	; (dc4 <USB_Handler+0x5c4>)
     db6:	0038      	movs	r0, r7
     db8:	4798      	blx	r3
     dba:	e68d      	b.n	ad8 <USB_Handler+0x2d8>
     dbc:	2000003c 	.word	0x2000003c
     dc0:	200000c0 	.word	0x200000c0
     dc4:	20000040 	.word	0x20000040

00000dc8 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     dc8:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     dca:	2200      	movs	r2, #0
     dcc:	4b10      	ldr	r3, [pc, #64]	; (e10 <EIC_Handler+0x48>)
     dce:	701a      	strb	r2, [r3, #0]
     dd0:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     dd2:	4910      	ldr	r1, [pc, #64]	; (e14 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     dd4:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     dd6:	4e10      	ldr	r6, [pc, #64]	; (e18 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     dd8:	4c0d      	ldr	r4, [pc, #52]	; (e10 <EIC_Handler+0x48>)
     dda:	e00a      	b.n	df2 <EIC_Handler+0x2a>
		return eics[eic_index];
     ddc:	490d      	ldr	r1, [pc, #52]	; (e14 <EIC_Handler+0x4c>)
     dde:	e008      	b.n	df2 <EIC_Handler+0x2a>
     de0:	7823      	ldrb	r3, [r4, #0]
     de2:	3301      	adds	r3, #1
     de4:	b2db      	uxtb	r3, r3
     de6:	7023      	strb	r3, [r4, #0]
     de8:	2b0f      	cmp	r3, #15
     dea:	d810      	bhi.n	e0e <EIC_Handler+0x46>
		return NULL;
     dec:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     dee:	2b1f      	cmp	r3, #31
     df0:	d9f4      	bls.n	ddc <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     df2:	0028      	movs	r0, r5
     df4:	4018      	ands	r0, r3
     df6:	2201      	movs	r2, #1
     df8:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     dfa:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     dfc:	4210      	tst	r0, r2
     dfe:	d0ef      	beq.n	de0 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     e00:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     e02:	009b      	lsls	r3, r3, #2
     e04:	599b      	ldr	r3, [r3, r6]
     e06:	2b00      	cmp	r3, #0
     e08:	d0ea      	beq.n	de0 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     e0a:	4798      	blx	r3
     e0c:	e7e8      	b.n	de0 <EIC_Handler+0x18>
			}
		}
	}
}
     e0e:	bd70      	pop	{r4, r5, r6, pc}
     e10:	200001c0 	.word	0x200001c0
     e14:	40001800 	.word	0x40001800
     e18:	20000074 	.word	0x20000074

00000e1c <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
     e1c:	4770      	bx	lr
	...

00000e20 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     e20:	4b0c      	ldr	r3, [pc, #48]	; (e54 <cpu_irq_enter_critical+0x34>)
     e22:	681b      	ldr	r3, [r3, #0]
     e24:	2b00      	cmp	r3, #0
     e26:	d106      	bne.n	e36 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     e28:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     e2c:	2b00      	cmp	r3, #0
     e2e:	d007      	beq.n	e40 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     e30:	2200      	movs	r2, #0
     e32:	4b09      	ldr	r3, [pc, #36]	; (e58 <cpu_irq_enter_critical+0x38>)
     e34:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     e36:	4a07      	ldr	r2, [pc, #28]	; (e54 <cpu_irq_enter_critical+0x34>)
     e38:	6813      	ldr	r3, [r2, #0]
     e3a:	3301      	adds	r3, #1
     e3c:	6013      	str	r3, [r2, #0]
}
     e3e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     e40:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     e42:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     e46:	2200      	movs	r2, #0
     e48:	4b04      	ldr	r3, [pc, #16]	; (e5c <cpu_irq_enter_critical+0x3c>)
     e4a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     e4c:	3201      	adds	r2, #1
     e4e:	4b02      	ldr	r3, [pc, #8]	; (e58 <cpu_irq_enter_critical+0x38>)
     e50:	701a      	strb	r2, [r3, #0]
     e52:	e7f0      	b.n	e36 <cpu_irq_enter_critical+0x16>
     e54:	20000054 	.word	0x20000054
     e58:	20000058 	.word	0x20000058
     e5c:	20000000 	.word	0x20000000

00000e60 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     e60:	4b08      	ldr	r3, [pc, #32]	; (e84 <cpu_irq_leave_critical+0x24>)
     e62:	681a      	ldr	r2, [r3, #0]
     e64:	3a01      	subs	r2, #1
     e66:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     e68:	681b      	ldr	r3, [r3, #0]
     e6a:	2b00      	cmp	r3, #0
     e6c:	d109      	bne.n	e82 <cpu_irq_leave_critical+0x22>
     e6e:	4b06      	ldr	r3, [pc, #24]	; (e88 <cpu_irq_leave_critical+0x28>)
     e70:	781b      	ldrb	r3, [r3, #0]
     e72:	2b00      	cmp	r3, #0
     e74:	d005      	beq.n	e82 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     e76:	2201      	movs	r2, #1
     e78:	4b04      	ldr	r3, [pc, #16]	; (e8c <cpu_irq_leave_critical+0x2c>)
     e7a:	701a      	strb	r2, [r3, #0]
     e7c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     e80:	b662      	cpsie	i
	}
}
     e82:	4770      	bx	lr
     e84:	20000054 	.word	0x20000054
     e88:	20000058 	.word	0x20000058
     e8c:	20000000 	.word	0x20000000

00000e90 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     e90:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     e92:	490c      	ldr	r1, [pc, #48]	; (ec4 <system_clock_source_osc8m_set_config+0x34>)
     e94:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     e96:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     e98:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     e9a:	7840      	ldrb	r0, [r0, #1]
     e9c:	2201      	movs	r2, #1
     e9e:	4010      	ands	r0, r2
     ea0:	0180      	lsls	r0, r0, #6
     ea2:	2640      	movs	r6, #64	; 0x40
     ea4:	43b3      	bics	r3, r6
     ea6:	4303      	orrs	r3, r0
     ea8:	402a      	ands	r2, r5
     eaa:	01d2      	lsls	r2, r2, #7
     eac:	2080      	movs	r0, #128	; 0x80
     eae:	4383      	bics	r3, r0
     eb0:	4313      	orrs	r3, r2
     eb2:	2203      	movs	r2, #3
     eb4:	4022      	ands	r2, r4
     eb6:	0212      	lsls	r2, r2, #8
     eb8:	4803      	ldr	r0, [pc, #12]	; (ec8 <system_clock_source_osc8m_set_config+0x38>)
     eba:	4003      	ands	r3, r0
     ebc:	4313      	orrs	r3, r2
     ebe:	620b      	str	r3, [r1, #32]
}
     ec0:	bd70      	pop	{r4, r5, r6, pc}
     ec2:	46c0      	nop			; (mov r8, r8)
     ec4:	40000800 	.word	0x40000800
     ec8:	fffffcff 	.word	0xfffffcff

00000ecc <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     ecc:	2808      	cmp	r0, #8
     ece:	d803      	bhi.n	ed8 <system_clock_source_enable+0xc>
     ed0:	0080      	lsls	r0, r0, #2
     ed2:	4b25      	ldr	r3, [pc, #148]	; (f68 <system_clock_source_enable+0x9c>)
     ed4:	581b      	ldr	r3, [r3, r0]
     ed6:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     ed8:	2017      	movs	r0, #23
     eda:	e044      	b.n	f66 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     edc:	4a23      	ldr	r2, [pc, #140]	; (f6c <system_clock_source_enable+0xa0>)
     ede:	6a13      	ldr	r3, [r2, #32]
     ee0:	2102      	movs	r1, #2
     ee2:	430b      	orrs	r3, r1
     ee4:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     ee6:	2000      	movs	r0, #0
     ee8:	e03d      	b.n	f66 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     eea:	4a20      	ldr	r2, [pc, #128]	; (f6c <system_clock_source_enable+0xa0>)
     eec:	6993      	ldr	r3, [r2, #24]
     eee:	2102      	movs	r1, #2
     ef0:	430b      	orrs	r3, r1
     ef2:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
     ef4:	2000      	movs	r0, #0
		break;
     ef6:	e036      	b.n	f66 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     ef8:	4a1c      	ldr	r2, [pc, #112]	; (f6c <system_clock_source_enable+0xa0>)
     efa:	8a13      	ldrh	r3, [r2, #16]
     efc:	2102      	movs	r1, #2
     efe:	430b      	orrs	r3, r1
     f00:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
     f02:	2000      	movs	r0, #0
		break;
     f04:	e02f      	b.n	f66 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     f06:	4a19      	ldr	r2, [pc, #100]	; (f6c <system_clock_source_enable+0xa0>)
     f08:	8a93      	ldrh	r3, [r2, #20]
     f0a:	2102      	movs	r1, #2
     f0c:	430b      	orrs	r3, r1
     f0e:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
     f10:	2000      	movs	r0, #0
		break;
     f12:	e028      	b.n	f66 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     f14:	4916      	ldr	r1, [pc, #88]	; (f70 <system_clock_source_enable+0xa4>)
     f16:	680b      	ldr	r3, [r1, #0]
     f18:	2202      	movs	r2, #2
     f1a:	4313      	orrs	r3, r2
     f1c:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     f1e:	4b13      	ldr	r3, [pc, #76]	; (f6c <system_clock_source_enable+0xa0>)
     f20:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     f22:	0019      	movs	r1, r3
     f24:	320e      	adds	r2, #14
     f26:	68cb      	ldr	r3, [r1, #12]
     f28:	421a      	tst	r2, r3
     f2a:	d0fc      	beq.n	f26 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     f2c:	4a10      	ldr	r2, [pc, #64]	; (f70 <system_clock_source_enable+0xa4>)
     f2e:	6891      	ldr	r1, [r2, #8]
     f30:	4b0e      	ldr	r3, [pc, #56]	; (f6c <system_clock_source_enable+0xa0>)
     f32:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     f34:	6852      	ldr	r2, [r2, #4]
     f36:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
     f38:	2200      	movs	r2, #0
     f3a:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     f3c:	0019      	movs	r1, r3
     f3e:	3210      	adds	r2, #16
     f40:	68cb      	ldr	r3, [r1, #12]
     f42:	421a      	tst	r2, r3
     f44:	d0fc      	beq.n	f40 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     f46:	4b0a      	ldr	r3, [pc, #40]	; (f70 <system_clock_source_enable+0xa4>)
     f48:	681b      	ldr	r3, [r3, #0]
     f4a:	b29b      	uxth	r3, r3
     f4c:	4a07      	ldr	r2, [pc, #28]	; (f6c <system_clock_source_enable+0xa0>)
     f4e:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
     f50:	2000      	movs	r0, #0
     f52:	e008      	b.n	f66 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     f54:	4905      	ldr	r1, [pc, #20]	; (f6c <system_clock_source_enable+0xa0>)
     f56:	2244      	movs	r2, #68	; 0x44
     f58:	5c8b      	ldrb	r3, [r1, r2]
     f5a:	2002      	movs	r0, #2
     f5c:	4303      	orrs	r3, r0
     f5e:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
     f60:	2000      	movs	r0, #0
		break;
     f62:	e000      	b.n	f66 <system_clock_source_enable+0x9a>
		return STATUS_OK;
     f64:	2000      	movs	r0, #0
}
     f66:	4770      	bx	lr
     f68:	00001528 	.word	0x00001528
     f6c:	40000800 	.word	0x40000800
     f70:	2000005c 	.word	0x2000005c

00000f74 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     f74:	b530      	push	{r4, r5, lr}
     f76:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     f78:	22c2      	movs	r2, #194	; 0xc2
     f7a:	00d2      	lsls	r2, r2, #3
     f7c:	4b1a      	ldr	r3, [pc, #104]	; (fe8 <system_clock_init+0x74>)
     f7e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     f80:	4a1a      	ldr	r2, [pc, #104]	; (fec <system_clock_init+0x78>)
     f82:	6853      	ldr	r3, [r2, #4]
     f84:	211e      	movs	r1, #30
     f86:	438b      	bics	r3, r1
     f88:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
     f8a:	2301      	movs	r3, #1
     f8c:	466a      	mov	r2, sp
     f8e:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     f90:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     f92:	4d17      	ldr	r5, [pc, #92]	; (ff0 <system_clock_init+0x7c>)
     f94:	b2e0      	uxtb	r0, r4
     f96:	4669      	mov	r1, sp
     f98:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     f9a:	3401      	adds	r4, #1
     f9c:	2c25      	cmp	r4, #37	; 0x25
     f9e:	d1f9      	bne.n	f94 <system_clock_init+0x20>
	config->run_in_standby  = false;
     fa0:	a803      	add	r0, sp, #12
     fa2:	2400      	movs	r4, #0
     fa4:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
     fa6:	2501      	movs	r5, #1
     fa8:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     faa:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     fac:	4b11      	ldr	r3, [pc, #68]	; (ff4 <system_clock_init+0x80>)
     fae:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     fb0:	2006      	movs	r0, #6
     fb2:	4b11      	ldr	r3, [pc, #68]	; (ff8 <system_clock_init+0x84>)
     fb4:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     fb6:	4b11      	ldr	r3, [pc, #68]	; (ffc <system_clock_init+0x88>)
     fb8:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
     fba:	4b11      	ldr	r3, [pc, #68]	; (1000 <system_clock_init+0x8c>)
     fbc:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
     fbe:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
     fc0:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
     fc2:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
     fc4:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
     fc6:	466b      	mov	r3, sp
     fc8:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
     fca:	2306      	movs	r3, #6
     fcc:	466a      	mov	r2, sp
     fce:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
     fd0:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
     fd2:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     fd4:	4669      	mov	r1, sp
     fd6:	2000      	movs	r0, #0
     fd8:	4b0a      	ldr	r3, [pc, #40]	; (1004 <system_clock_init+0x90>)
     fda:	4798      	blx	r3
     fdc:	2000      	movs	r0, #0
     fde:	4b0a      	ldr	r3, [pc, #40]	; (1008 <system_clock_init+0x94>)
     fe0:	4798      	blx	r3
#endif
}
     fe2:	b005      	add	sp, #20
     fe4:	bd30      	pop	{r4, r5, pc}
     fe6:	46c0      	nop			; (mov r8, r8)
     fe8:	40000800 	.word	0x40000800
     fec:	41004000 	.word	0x41004000
     ff0:	000011b9 	.word	0x000011b9
     ff4:	00000e91 	.word	0x00000e91
     ff8:	00000ecd 	.word	0x00000ecd
     ffc:	0000100d 	.word	0x0000100d
    1000:	40000400 	.word	0x40000400
    1004:	00001031 	.word	0x00001031
    1008:	000010e9 	.word	0x000010e9

0000100c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    100c:	4a06      	ldr	r2, [pc, #24]	; (1028 <system_gclk_init+0x1c>)
    100e:	6993      	ldr	r3, [r2, #24]
    1010:	2108      	movs	r1, #8
    1012:	430b      	orrs	r3, r1
    1014:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1016:	2201      	movs	r2, #1
    1018:	4b04      	ldr	r3, [pc, #16]	; (102c <system_gclk_init+0x20>)
    101a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    101c:	0019      	movs	r1, r3
    101e:	780b      	ldrb	r3, [r1, #0]
    1020:	4213      	tst	r3, r2
    1022:	d1fc      	bne.n	101e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1024:	4770      	bx	lr
    1026:	46c0      	nop			; (mov r8, r8)
    1028:	40000400 	.word	0x40000400
    102c:	40000c00 	.word	0x40000c00

00001030 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1030:	b570      	push	{r4, r5, r6, lr}
    1032:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1034:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1036:	780d      	ldrb	r5, [r1, #0]
    1038:	022d      	lsls	r5, r5, #8
    103a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    103c:	784b      	ldrb	r3, [r1, #1]
    103e:	2b00      	cmp	r3, #0
    1040:	d002      	beq.n	1048 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1042:	2380      	movs	r3, #128	; 0x80
    1044:	02db      	lsls	r3, r3, #11
    1046:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1048:	7a4b      	ldrb	r3, [r1, #9]
    104a:	2b00      	cmp	r3, #0
    104c:	d002      	beq.n	1054 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    104e:	2380      	movs	r3, #128	; 0x80
    1050:	031b      	lsls	r3, r3, #12
    1052:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1054:	6848      	ldr	r0, [r1, #4]
    1056:	2801      	cmp	r0, #1
    1058:	d910      	bls.n	107c <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    105a:	1e43      	subs	r3, r0, #1
    105c:	4218      	tst	r0, r3
    105e:	d134      	bne.n	10ca <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1060:	2802      	cmp	r0, #2
    1062:	d930      	bls.n	10c6 <system_gclk_gen_set_config+0x96>
    1064:	2302      	movs	r3, #2
    1066:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1068:	3201      	adds	r2, #1
						mask <<= 1) {
    106a:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    106c:	4298      	cmp	r0, r3
    106e:	d8fb      	bhi.n	1068 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1070:	0212      	lsls	r2, r2, #8
    1072:	4332      	orrs	r2, r6
    1074:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1076:	2380      	movs	r3, #128	; 0x80
    1078:	035b      	lsls	r3, r3, #13
    107a:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    107c:	7a0b      	ldrb	r3, [r1, #8]
    107e:	2b00      	cmp	r3, #0
    1080:	d002      	beq.n	1088 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1082:	2380      	movs	r3, #128	; 0x80
    1084:	039b      	lsls	r3, r3, #14
    1086:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1088:	4a13      	ldr	r2, [pc, #76]	; (10d8 <system_gclk_gen_set_config+0xa8>)
    108a:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    108c:	b25b      	sxtb	r3, r3
    108e:	2b00      	cmp	r3, #0
    1090:	dbfb      	blt.n	108a <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    1092:	4b12      	ldr	r3, [pc, #72]	; (10dc <system_gclk_gen_set_config+0xac>)
    1094:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1096:	4b12      	ldr	r3, [pc, #72]	; (10e0 <system_gclk_gen_set_config+0xb0>)
    1098:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    109a:	4a0f      	ldr	r2, [pc, #60]	; (10d8 <system_gclk_gen_set_config+0xa8>)
    109c:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    109e:	b25b      	sxtb	r3, r3
    10a0:	2b00      	cmp	r3, #0
    10a2:	dbfb      	blt.n	109c <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    10a4:	4b0c      	ldr	r3, [pc, #48]	; (10d8 <system_gclk_gen_set_config+0xa8>)
    10a6:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    10a8:	001a      	movs	r2, r3
    10aa:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    10ac:	b25b      	sxtb	r3, r3
    10ae:	2b00      	cmp	r3, #0
    10b0:	dbfb      	blt.n	10aa <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    10b2:	4a09      	ldr	r2, [pc, #36]	; (10d8 <system_gclk_gen_set_config+0xa8>)
    10b4:	6853      	ldr	r3, [r2, #4]
    10b6:	2180      	movs	r1, #128	; 0x80
    10b8:	0249      	lsls	r1, r1, #9
    10ba:	400b      	ands	r3, r1
    10bc:	431d      	orrs	r5, r3
    10be:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    10c0:	4b08      	ldr	r3, [pc, #32]	; (10e4 <system_gclk_gen_set_config+0xb4>)
    10c2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    10c4:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    10c6:	2200      	movs	r2, #0
    10c8:	e7d2      	b.n	1070 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    10ca:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    10cc:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    10ce:	2380      	movs	r3, #128	; 0x80
    10d0:	029b      	lsls	r3, r3, #10
    10d2:	431d      	orrs	r5, r3
    10d4:	e7d2      	b.n	107c <system_gclk_gen_set_config+0x4c>
    10d6:	46c0      	nop			; (mov r8, r8)
    10d8:	40000c00 	.word	0x40000c00
    10dc:	00000e21 	.word	0x00000e21
    10e0:	40000c08 	.word	0x40000c08
    10e4:	00000e61 	.word	0x00000e61

000010e8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    10e8:	b510      	push	{r4, lr}
    10ea:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    10ec:	4a0b      	ldr	r2, [pc, #44]	; (111c <system_gclk_gen_enable+0x34>)
    10ee:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    10f0:	b25b      	sxtb	r3, r3
    10f2:	2b00      	cmp	r3, #0
    10f4:	dbfb      	blt.n	10ee <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    10f6:	4b0a      	ldr	r3, [pc, #40]	; (1120 <system_gclk_gen_enable+0x38>)
    10f8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    10fa:	4b0a      	ldr	r3, [pc, #40]	; (1124 <system_gclk_gen_enable+0x3c>)
    10fc:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    10fe:	4a07      	ldr	r2, [pc, #28]	; (111c <system_gclk_gen_enable+0x34>)
    1100:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1102:	b25b      	sxtb	r3, r3
    1104:	2b00      	cmp	r3, #0
    1106:	dbfb      	blt.n	1100 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1108:	4a04      	ldr	r2, [pc, #16]	; (111c <system_gclk_gen_enable+0x34>)
    110a:	6851      	ldr	r1, [r2, #4]
    110c:	2380      	movs	r3, #128	; 0x80
    110e:	025b      	lsls	r3, r3, #9
    1110:	430b      	orrs	r3, r1
    1112:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1114:	4b04      	ldr	r3, [pc, #16]	; (1128 <system_gclk_gen_enable+0x40>)
    1116:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1118:	bd10      	pop	{r4, pc}
    111a:	46c0      	nop			; (mov r8, r8)
    111c:	40000c00 	.word	0x40000c00
    1120:	00000e21 	.word	0x00000e21
    1124:	40000c04 	.word	0x40000c04
    1128:	00000e61 	.word	0x00000e61

0000112c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    112c:	b510      	push	{r4, lr}
    112e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1130:	4b06      	ldr	r3, [pc, #24]	; (114c <system_gclk_chan_enable+0x20>)
    1132:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1134:	4b06      	ldr	r3, [pc, #24]	; (1150 <system_gclk_chan_enable+0x24>)
    1136:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1138:	4a06      	ldr	r2, [pc, #24]	; (1154 <system_gclk_chan_enable+0x28>)
    113a:	8853      	ldrh	r3, [r2, #2]
    113c:	2180      	movs	r1, #128	; 0x80
    113e:	01c9      	lsls	r1, r1, #7
    1140:	430b      	orrs	r3, r1
    1142:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1144:	4b04      	ldr	r3, [pc, #16]	; (1158 <system_gclk_chan_enable+0x2c>)
    1146:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1148:	bd10      	pop	{r4, pc}
    114a:	46c0      	nop			; (mov r8, r8)
    114c:	00000e21 	.word	0x00000e21
    1150:	40000c02 	.word	0x40000c02
    1154:	40000c00 	.word	0x40000c00
    1158:	00000e61 	.word	0x00000e61

0000115c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    115c:	b510      	push	{r4, lr}
    115e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1160:	4b0f      	ldr	r3, [pc, #60]	; (11a0 <system_gclk_chan_disable+0x44>)
    1162:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1164:	4b0f      	ldr	r3, [pc, #60]	; (11a4 <system_gclk_chan_disable+0x48>)
    1166:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1168:	4a0f      	ldr	r2, [pc, #60]	; (11a8 <system_gclk_chan_disable+0x4c>)
    116a:	8853      	ldrh	r3, [r2, #2]
    116c:	051b      	lsls	r3, r3, #20
    116e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1170:	8853      	ldrh	r3, [r2, #2]
    1172:	490e      	ldr	r1, [pc, #56]	; (11ac <system_gclk_chan_disable+0x50>)
    1174:	400b      	ands	r3, r1
    1176:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1178:	8853      	ldrh	r3, [r2, #2]
    117a:	490d      	ldr	r1, [pc, #52]	; (11b0 <system_gclk_chan_disable+0x54>)
    117c:	400b      	ands	r3, r1
    117e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1180:	0011      	movs	r1, r2
    1182:	2280      	movs	r2, #128	; 0x80
    1184:	01d2      	lsls	r2, r2, #7
    1186:	884b      	ldrh	r3, [r1, #2]
    1188:	4213      	tst	r3, r2
    118a:	d1fc      	bne.n	1186 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    118c:	4906      	ldr	r1, [pc, #24]	; (11a8 <system_gclk_chan_disable+0x4c>)
    118e:	884a      	ldrh	r2, [r1, #2]
    1190:	0203      	lsls	r3, r0, #8
    1192:	4806      	ldr	r0, [pc, #24]	; (11ac <system_gclk_chan_disable+0x50>)
    1194:	4002      	ands	r2, r0
    1196:	4313      	orrs	r3, r2
    1198:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    119a:	4b06      	ldr	r3, [pc, #24]	; (11b4 <system_gclk_chan_disable+0x58>)
    119c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    119e:	bd10      	pop	{r4, pc}
    11a0:	00000e21 	.word	0x00000e21
    11a4:	40000c02 	.word	0x40000c02
    11a8:	40000c00 	.word	0x40000c00
    11ac:	fffff0ff 	.word	0xfffff0ff
    11b0:	ffffbfff 	.word	0xffffbfff
    11b4:	00000e61 	.word	0x00000e61

000011b8 <system_gclk_chan_set_config>:
{
    11b8:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    11ba:	780c      	ldrb	r4, [r1, #0]
    11bc:	0224      	lsls	r4, r4, #8
    11be:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    11c0:	4b02      	ldr	r3, [pc, #8]	; (11cc <system_gclk_chan_set_config+0x14>)
    11c2:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    11c4:	b2a4      	uxth	r4, r4
    11c6:	4b02      	ldr	r3, [pc, #8]	; (11d0 <system_gclk_chan_set_config+0x18>)
    11c8:	805c      	strh	r4, [r3, #2]
}
    11ca:	bd10      	pop	{r4, pc}
    11cc:	0000115d 	.word	0x0000115d
    11d0:	40000c00 	.word	0x40000c00

000011d4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    11d4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    11d6:	78d3      	ldrb	r3, [r2, #3]
    11d8:	2b00      	cmp	r3, #0
    11da:	d135      	bne.n	1248 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    11dc:	7813      	ldrb	r3, [r2, #0]
    11de:	2b80      	cmp	r3, #128	; 0x80
    11e0:	d029      	beq.n	1236 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    11e2:	061b      	lsls	r3, r3, #24
    11e4:	2480      	movs	r4, #128	; 0x80
    11e6:	0264      	lsls	r4, r4, #9
    11e8:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    11ea:	7854      	ldrb	r4, [r2, #1]
    11ec:	2502      	movs	r5, #2
    11ee:	43ac      	bics	r4, r5
    11f0:	d106      	bne.n	1200 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    11f2:	7894      	ldrb	r4, [r2, #2]
    11f4:	2c00      	cmp	r4, #0
    11f6:	d120      	bne.n	123a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    11f8:	2480      	movs	r4, #128	; 0x80
    11fa:	02a4      	lsls	r4, r4, #10
    11fc:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    11fe:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1200:	7854      	ldrb	r4, [r2, #1]
    1202:	3c01      	subs	r4, #1
    1204:	2c01      	cmp	r4, #1
    1206:	d91c      	bls.n	1242 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1208:	040d      	lsls	r5, r1, #16
    120a:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    120c:	24a0      	movs	r4, #160	; 0xa0
    120e:	05e4      	lsls	r4, r4, #23
    1210:	432c      	orrs	r4, r5
    1212:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1214:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1216:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1218:	24d0      	movs	r4, #208	; 0xd0
    121a:	0624      	lsls	r4, r4, #24
    121c:	432c      	orrs	r4, r5
    121e:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1220:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1222:	78d4      	ldrb	r4, [r2, #3]
    1224:	2c00      	cmp	r4, #0
    1226:	d122      	bne.n	126e <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1228:	035b      	lsls	r3, r3, #13
    122a:	d51c      	bpl.n	1266 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    122c:	7893      	ldrb	r3, [r2, #2]
    122e:	2b01      	cmp	r3, #1
    1230:	d01e      	beq.n	1270 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1232:	6141      	str	r1, [r0, #20]
    1234:	e017      	b.n	1266 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1236:	2300      	movs	r3, #0
    1238:	e7d7      	b.n	11ea <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    123a:	24c0      	movs	r4, #192	; 0xc0
    123c:	02e4      	lsls	r4, r4, #11
    123e:	4323      	orrs	r3, r4
    1240:	e7dd      	b.n	11fe <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1242:	4c0d      	ldr	r4, [pc, #52]	; (1278 <_system_pinmux_config+0xa4>)
    1244:	4023      	ands	r3, r4
    1246:	e7df      	b.n	1208 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1248:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    124a:	040c      	lsls	r4, r1, #16
    124c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    124e:	23a0      	movs	r3, #160	; 0xa0
    1250:	05db      	lsls	r3, r3, #23
    1252:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1254:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1256:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1258:	23d0      	movs	r3, #208	; 0xd0
    125a:	061b      	lsls	r3, r3, #24
    125c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    125e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1260:	78d3      	ldrb	r3, [r2, #3]
    1262:	2b00      	cmp	r3, #0
    1264:	d103      	bne.n	126e <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1266:	7853      	ldrb	r3, [r2, #1]
    1268:	3b01      	subs	r3, #1
    126a:	2b01      	cmp	r3, #1
    126c:	d902      	bls.n	1274 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    126e:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1270:	6181      	str	r1, [r0, #24]
    1272:	e7f8      	b.n	1266 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1274:	6081      	str	r1, [r0, #8]
}
    1276:	e7fa      	b.n	126e <_system_pinmux_config+0x9a>
    1278:	fffbffff 	.word	0xfffbffff

0000127c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    127c:	b510      	push	{r4, lr}
    127e:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1280:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1282:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1284:	2900      	cmp	r1, #0
    1286:	d104      	bne.n	1292 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1288:	0943      	lsrs	r3, r0, #5
    128a:	01db      	lsls	r3, r3, #7
    128c:	4905      	ldr	r1, [pc, #20]	; (12a4 <system_pinmux_pin_set_config+0x28>)
    128e:	468c      	mov	ip, r1
    1290:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1292:	241f      	movs	r4, #31
    1294:	4020      	ands	r0, r4
    1296:	2101      	movs	r1, #1
    1298:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    129a:	0018      	movs	r0, r3
    129c:	4b02      	ldr	r3, [pc, #8]	; (12a8 <system_pinmux_pin_set_config+0x2c>)
    129e:	4798      	blx	r3
}
    12a0:	bd10      	pop	{r4, pc}
    12a2:	46c0      	nop			; (mov r8, r8)
    12a4:	41004400 	.word	0x41004400
    12a8:	000011d5 	.word	0x000011d5

000012ac <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    12ac:	4770      	bx	lr
	...

000012b0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    12b0:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    12b2:	4b05      	ldr	r3, [pc, #20]	; (12c8 <system_init+0x18>)
    12b4:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    12b6:	4b05      	ldr	r3, [pc, #20]	; (12cc <system_init+0x1c>)
    12b8:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    12ba:	4b05      	ldr	r3, [pc, #20]	; (12d0 <system_init+0x20>)
    12bc:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    12be:	4b05      	ldr	r3, [pc, #20]	; (12d4 <system_init+0x24>)
    12c0:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    12c2:	4b05      	ldr	r3, [pc, #20]	; (12d8 <system_init+0x28>)
    12c4:	4798      	blx	r3
}
    12c6:	bd10      	pop	{r4, pc}
    12c8:	00000f75 	.word	0x00000f75
    12cc:	00000e1d 	.word	0x00000e1d
    12d0:	000012ad 	.word	0x000012ad
    12d4:	0000012d 	.word	0x0000012d
    12d8:	000012ad 	.word	0x000012ad

000012dc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    12dc:	e7fe      	b.n	12dc <Dummy_Handler>
	...

000012e0 <Reset_Handler>:
{
    12e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    12e2:	4a2a      	ldr	r2, [pc, #168]	; (138c <Reset_Handler+0xac>)
    12e4:	4b2a      	ldr	r3, [pc, #168]	; (1390 <Reset_Handler+0xb0>)
    12e6:	429a      	cmp	r2, r3
    12e8:	d011      	beq.n	130e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    12ea:	001a      	movs	r2, r3
    12ec:	4b29      	ldr	r3, [pc, #164]	; (1394 <Reset_Handler+0xb4>)
    12ee:	429a      	cmp	r2, r3
    12f0:	d20d      	bcs.n	130e <Reset_Handler+0x2e>
    12f2:	4a29      	ldr	r2, [pc, #164]	; (1398 <Reset_Handler+0xb8>)
    12f4:	3303      	adds	r3, #3
    12f6:	1a9b      	subs	r3, r3, r2
    12f8:	089b      	lsrs	r3, r3, #2
    12fa:	3301      	adds	r3, #1
    12fc:	009b      	lsls	r3, r3, #2
    12fe:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1300:	4823      	ldr	r0, [pc, #140]	; (1390 <Reset_Handler+0xb0>)
    1302:	4922      	ldr	r1, [pc, #136]	; (138c <Reset_Handler+0xac>)
    1304:	588c      	ldr	r4, [r1, r2]
    1306:	5084      	str	r4, [r0, r2]
    1308:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    130a:	429a      	cmp	r2, r3
    130c:	d1fa      	bne.n	1304 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    130e:	4a23      	ldr	r2, [pc, #140]	; (139c <Reset_Handler+0xbc>)
    1310:	4b23      	ldr	r3, [pc, #140]	; (13a0 <Reset_Handler+0xc0>)
    1312:	429a      	cmp	r2, r3
    1314:	d20a      	bcs.n	132c <Reset_Handler+0x4c>
    1316:	43d3      	mvns	r3, r2
    1318:	4921      	ldr	r1, [pc, #132]	; (13a0 <Reset_Handler+0xc0>)
    131a:	185b      	adds	r3, r3, r1
    131c:	2103      	movs	r1, #3
    131e:	438b      	bics	r3, r1
    1320:	3304      	adds	r3, #4
    1322:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1324:	2100      	movs	r1, #0
    1326:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1328:	4293      	cmp	r3, r2
    132a:	d1fc      	bne.n	1326 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    132c:	4a1d      	ldr	r2, [pc, #116]	; (13a4 <Reset_Handler+0xc4>)
    132e:	21ff      	movs	r1, #255	; 0xff
    1330:	4b1d      	ldr	r3, [pc, #116]	; (13a8 <Reset_Handler+0xc8>)
    1332:	438b      	bics	r3, r1
    1334:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1336:	39fd      	subs	r1, #253	; 0xfd
    1338:	2390      	movs	r3, #144	; 0x90
    133a:	005b      	lsls	r3, r3, #1
    133c:	4a1b      	ldr	r2, [pc, #108]	; (13ac <Reset_Handler+0xcc>)
    133e:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1340:	4a1b      	ldr	r2, [pc, #108]	; (13b0 <Reset_Handler+0xd0>)
    1342:	78d3      	ldrb	r3, [r2, #3]
    1344:	2503      	movs	r5, #3
    1346:	43ab      	bics	r3, r5
    1348:	2402      	movs	r4, #2
    134a:	4323      	orrs	r3, r4
    134c:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    134e:	78d3      	ldrb	r3, [r2, #3]
    1350:	270c      	movs	r7, #12
    1352:	43bb      	bics	r3, r7
    1354:	2608      	movs	r6, #8
    1356:	4333      	orrs	r3, r6
    1358:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    135a:	4b16      	ldr	r3, [pc, #88]	; (13b4 <Reset_Handler+0xd4>)
    135c:	7b98      	ldrb	r0, [r3, #14]
    135e:	2230      	movs	r2, #48	; 0x30
    1360:	4390      	bics	r0, r2
    1362:	2220      	movs	r2, #32
    1364:	4310      	orrs	r0, r2
    1366:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1368:	7b99      	ldrb	r1, [r3, #14]
    136a:	43b9      	bics	r1, r7
    136c:	4331      	orrs	r1, r6
    136e:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1370:	7b9a      	ldrb	r2, [r3, #14]
    1372:	43aa      	bics	r2, r5
    1374:	4322      	orrs	r2, r4
    1376:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1378:	4a0f      	ldr	r2, [pc, #60]	; (13b8 <Reset_Handler+0xd8>)
    137a:	6853      	ldr	r3, [r2, #4]
    137c:	2180      	movs	r1, #128	; 0x80
    137e:	430b      	orrs	r3, r1
    1380:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1382:	4b0e      	ldr	r3, [pc, #56]	; (13bc <Reset_Handler+0xdc>)
    1384:	4798      	blx	r3
        main();
    1386:	4b0e      	ldr	r3, [pc, #56]	; (13c0 <Reset_Handler+0xe0>)
    1388:	4798      	blx	r3
    138a:	e7fe      	b.n	138a <Reset_Handler+0xaa>
    138c:	0000156c 	.word	0x0000156c
    1390:	20000000 	.word	0x20000000
    1394:	20000004 	.word	0x20000004
    1398:	20000004 	.word	0x20000004
    139c:	20000004 	.word	0x20000004
    13a0:	20000280 	.word	0x20000280
    13a4:	e000ed00 	.word	0xe000ed00
    13a8:	00000000 	.word	0x00000000
    13ac:	41007000 	.word	0x41007000
    13b0:	41005000 	.word	0x41005000
    13b4:	41004800 	.word	0x41004800
    13b8:	41004000 	.word	0x41004000
    13bc:	0000147d 	.word	0x0000147d
    13c0:	000013c5 	.word	0x000013c5

000013c4 <main>:
	tcc_enable(&tcc_steering);
}


int main (void)
{
    13c4:	b570      	push	{r4, r5, r6, lr}
    13c6:	b0aa      	sub	sp, #168	; 0xa8
	system_init();
    13c8:	4b15      	ldr	r3, [pc, #84]	; (1420 <main+0x5c>)
    13ca:	4798      	blx	r3
	tcc_get_config_defaults(&config_tcc, TCC1);
    13cc:	4e15      	ldr	r6, [pc, #84]	; (1424 <main+0x60>)
    13ce:	ac01      	add	r4, sp, #4
    13d0:	0031      	movs	r1, r6
    13d2:	0020      	movs	r0, r4
    13d4:	4b14      	ldr	r3, [pc, #80]	; (1428 <main+0x64>)
    13d6:	4798      	blx	r3
	config_tcc.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV256;
    13d8:	2306      	movs	r3, #6
    13da:	72e3      	strb	r3, [r4, #11]
	config_tcc.counter.period = 0xEA6; //50Hz assuming 48Mhz clock
    13dc:	4a13      	ldr	r2, [pc, #76]	; (142c <main+0x68>)
    13de:	6062      	str	r2, [r4, #4]
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
    13e0:	2202      	movs	r2, #2
    13e2:	7622      	strb	r2, [r4, #24]
	config_tcc.compare.match[0] = (0xEA6 / 15); // 2ms (0xEA6 / 20 = 1ms)
    13e4:	32f8      	adds	r2, #248	; 0xf8
    13e6:	61e2      	str	r2, [r4, #28]
	config_tcc.pins.enable_wave_out_pin[0] = true;
    13e8:	2101      	movs	r1, #1
    13ea:	3a62      	subs	r2, #98	; 0x62
    13ec:	54a1      	strb	r1, [r4, r2]
	config_tcc.pins.wave_out_pin[0]        = steering;
    13ee:	65a3      	str	r3, [r4, #88]	; 0x58
	config_tcc.pins.wave_out_pin_mux[0]    = MUX_PA06E_TCC1_WO0;
    13f0:	3b02      	subs	r3, #2
    13f2:	67a3      	str	r3, [r4, #120]	; 0x78
	tcc_init(&tcc_steering, TCC1, &config_tcc);
    13f4:	4d0e      	ldr	r5, [pc, #56]	; (1430 <main+0x6c>)
    13f6:	0022      	movs	r2, r4
    13f8:	0031      	movs	r1, r6
    13fa:	0028      	movs	r0, r5
    13fc:	4b0d      	ldr	r3, [pc, #52]	; (1434 <main+0x70>)
    13fe:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    1400:	682b      	ldr	r3, [r5, #0]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    1402:	2202      	movs	r2, #2
    1404:	6899      	ldr	r1, [r3, #8]
    1406:	420a      	tst	r2, r1
    1408:	d1fc      	bne.n	1404 <main+0x40>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    140a:	681a      	ldr	r2, [r3, #0]
    140c:	2102      	movs	r1, #2
    140e:	430a      	orrs	r2, r1
    1410:	601a      	str	r2, [r3, #0]
	//configure_tcc_throttle();
	configure_tcc_steering();
	
	uint8_t result = 0; //result from SPI 
	
	REG_PORT_DIRSET0 = LED0; //Sets pin direction to output 
    1412:	4b09      	ldr	r3, [pc, #36]	; (1438 <main+0x74>)
    1414:	2208      	movs	r2, #8
    1416:	601a      	str	r2, [r3, #0]
	REG_PORT_DIRSET0 = LED1; //Sets pin direction to output 
    1418:	2280      	movs	r2, #128	; 0x80
    141a:	0512      	lsls	r2, r2, #20
    141c:	601a      	str	r2, [r3, #0]
    141e:	e7fe      	b.n	141e <main+0x5a>
    1420:	000012b1 	.word	0x000012b1
    1424:	42002400 	.word	0x42002400
    1428:	0000022d 	.word	0x0000022d
    142c:	00000ea6 	.word	0x00000ea6
    1430:	20000200 	.word	0x20000200
    1434:	00000379 	.word	0x00000379
    1438:	41004408 	.word	0x41004408

0000143c <__ctzsi2>:
    143c:	4241      	negs	r1, r0
    143e:	4008      	ands	r0, r1
    1440:	211c      	movs	r1, #28
    1442:	2301      	movs	r3, #1
    1444:	041b      	lsls	r3, r3, #16
    1446:	4298      	cmp	r0, r3
    1448:	d301      	bcc.n	144e <__ctzsi2+0x12>
    144a:	0c00      	lsrs	r0, r0, #16
    144c:	3910      	subs	r1, #16
    144e:	0a1b      	lsrs	r3, r3, #8
    1450:	4298      	cmp	r0, r3
    1452:	d301      	bcc.n	1458 <__ctzsi2+0x1c>
    1454:	0a00      	lsrs	r0, r0, #8
    1456:	3908      	subs	r1, #8
    1458:	091b      	lsrs	r3, r3, #4
    145a:	4298      	cmp	r0, r3
    145c:	d301      	bcc.n	1462 <__ctzsi2+0x26>
    145e:	0900      	lsrs	r0, r0, #4
    1460:	3904      	subs	r1, #4
    1462:	a202      	add	r2, pc, #8	; (adr r2, 146c <__ctzsi2+0x30>)
    1464:	5c10      	ldrb	r0, [r2, r0]
    1466:	1a40      	subs	r0, r0, r1
    1468:	4770      	bx	lr
    146a:	46c0      	nop			; (mov r8, r8)
    146c:	1d1d1c1b 	.word	0x1d1d1c1b
    1470:	1e1e1e1e 	.word	0x1e1e1e1e
    1474:	1f1f1f1f 	.word	0x1f1f1f1f
    1478:	1f1f1f1f 	.word	0x1f1f1f1f

0000147c <__libc_init_array>:
    147c:	b570      	push	{r4, r5, r6, lr}
    147e:	2600      	movs	r6, #0
    1480:	4d0c      	ldr	r5, [pc, #48]	; (14b4 <__libc_init_array+0x38>)
    1482:	4c0d      	ldr	r4, [pc, #52]	; (14b8 <__libc_init_array+0x3c>)
    1484:	1b64      	subs	r4, r4, r5
    1486:	10a4      	asrs	r4, r4, #2
    1488:	42a6      	cmp	r6, r4
    148a:	d109      	bne.n	14a0 <__libc_init_array+0x24>
    148c:	2600      	movs	r6, #0
    148e:	f000 f85d 	bl	154c <_init>
    1492:	4d0a      	ldr	r5, [pc, #40]	; (14bc <__libc_init_array+0x40>)
    1494:	4c0a      	ldr	r4, [pc, #40]	; (14c0 <__libc_init_array+0x44>)
    1496:	1b64      	subs	r4, r4, r5
    1498:	10a4      	asrs	r4, r4, #2
    149a:	42a6      	cmp	r6, r4
    149c:	d105      	bne.n	14aa <__libc_init_array+0x2e>
    149e:	bd70      	pop	{r4, r5, r6, pc}
    14a0:	00b3      	lsls	r3, r6, #2
    14a2:	58eb      	ldr	r3, [r5, r3]
    14a4:	4798      	blx	r3
    14a6:	3601      	adds	r6, #1
    14a8:	e7ee      	b.n	1488 <__libc_init_array+0xc>
    14aa:	00b3      	lsls	r3, r6, #2
    14ac:	58eb      	ldr	r3, [r5, r3]
    14ae:	4798      	blx	r3
    14b0:	3601      	adds	r6, #1
    14b2:	e7f2      	b.n	149a <__libc_init_array+0x1e>
    14b4:	00001558 	.word	0x00001558
    14b8:	00001558 	.word	0x00001558
    14bc:	00001558 	.word	0x00001558
    14c0:	0000155c 	.word	0x0000155c

000014c4 <_tcc_apbcmasks>:
    14c4:	00000100 00000200 00000400              ............

000014d0 <_tcc_cc_nums>:
    14d0:	00020204                                ....

000014d4 <_tcc_gclk_ids>:
    14d4:	001b1a1a                                ....

000014d8 <_tcc_maxs>:
    14d8:	00ffffff 00ffffff 0000ffff              ............

000014e4 <_tcc_ow_nums>:
    14e4:	00020408                                ....

000014e8 <_tcc_intflag>:
    14e8:	00000001 00000002 00000004 00000008     ................
    14f8:	00001000 00002000 00004000 00008000     ..... ...@......
    1508:	00010000 00020000 00040000 00080000     ................

00001518 <_usb_device_irq_bits>:
    1518:	00080004 00800070 01000001 00000200     ....p...........
    1528:	00000ef8 00000ed8 00000ed8 00000f64     ............d...
    1538:	00000eea 00000f06 00000edc 00000f14     ................
    1548:	00000f54                                T...

0000154c <_init>:
    154c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    154e:	46c0      	nop			; (mov r8, r8)
    1550:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1552:	bc08      	pop	{r3}
    1554:	469e      	mov	lr, r3
    1556:	4770      	bx	lr

00001558 <__init_array_start>:
    1558:	000000dd 	.word	0x000000dd

0000155c <_fini>:
    155c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    155e:	46c0      	nop			; (mov r8, r8)
    1560:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1562:	bc08      	pop	{r3}
    1564:	469e      	mov	lr, r3
    1566:	4770      	bx	lr

00001568 <__fini_array_start>:
    1568:	000000b5 	.word	0x000000b5
